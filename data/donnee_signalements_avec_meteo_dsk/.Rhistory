dim(d2)
kwptrosdata <- rbind(d1, d2)
names(MFdata)
names(d2)
names(d2)[1]
names(d2)[1]
names(d2)[1]<-"dewpoint"
names(d2)[1]
kwptrosdata <- rbind(d1, d2)
head(kwptrosdata)
summary(kwhumdata)
summary(kwptrosdata)
kruskal.test(dewpoint ~ origine, data = kwptrosdata) ## ~ signifie : "en fonction de"
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$pressure)
length(MFdata$press_mer)
##### et que l'étendue n'est pas la même
range(DSKdata$pressure, na.rm = TRUE)
range(MFdata$press_mer, na.rm = TRUE)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 980, to= 1045, by=2) ## tient compte des deux distributions
hist(DSKdata$pressure, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean pressure for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean pressure (T°C)"
)
HH2 <- hist(MFdata$press_mer, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$press_mer, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(990, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
shapiro.test(DSKdata$pressure) # W = 0.97812, p-value = 1.924e-12 => p-value significative, l'échantillon ne suit pas une loi normale.
text(1000, 0.05, paste("Darksky"), cex = 1.2,  col = "black")
shapiro.test(MFdata$press_mer) # W = 0.97813, p-value = 1.932e-12 => p-value significative, l'échantillon ne suit pas une loi normale.
### t.test entre les différentes températures
t.test(MFdata$press_mer,DSKdata$pressure) # t = 0.063932, df = 2378.9, p-value = 0.949 => p-value non significative, les 2 échantillons ne sont pas significativement différents !
d1 <- subset(DSKdata, select = c("pressure", "origine")) ## création du subset venant de DSK
dim(d1)
d2 <- subset(MFdata, select = c("press_mer", "origine")) ## création du subset venant de MF
dim(d2)
## pour utiliser la fusion "rbind" il faut que les champs aient le même nom (c'est le 1er qui pose problème)
names(d2)[1]
names(d2)[1]<-"pressure" ## renommage du 1er champ du tableau 2
names(d2)[1]
kwptrosdata <- rbind(d1, d2) ## fusion des deux sous tableaux
head(kwptrosdata)
summary(kwptrosdata)
kruskal.test(pressure ~ origine, data = kwptrosdata) ## ~ signifie : "en fonction de"
hist(DSKdata$pressure, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean pressure for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean pressure (hPa)"
)
HH2 <- hist(MFdata$press_mer, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$press_mer, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(1000, 0.05, paste("Darksky"), cex = 1.2,  col = "black")
text(990, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
## 1.1 XPS13
setwd("C:/3VG/MSH/lyme/Smartick17/pycitique/R/meteo")
getwd()
### Or, if .csv file, use this si données séparées par ";"
DSKdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/dsk_moyennes_journalieres_maille_42.csv", header = TRUE, sep = ";", dec = ".")
MFdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/mf_moyennes_journalieres_maille_42.csv", header = TRUE, sep = ";", dec = ".")
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$windspeed)
length(MFdata$vvent)
##### et que l'étendue n'est pas la même
range(DSKdata$windspeed, na.rm = TRUE)
range(MFdata$vvent, na.rm = TRUE)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 980, to= 1045, by=2) ## tient compte des deux distributions
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 1, to= 105, by=1) ## tient compte des deux distributions
hist(DSKdata$windspeed, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean windspeed for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean windspeed (m/s)"
)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 1, to= 10, by=1) ## tient compte des deux distributions
hist(DSKdata$windspeed, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean windspeed for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean windspeed (m/s)"
)
HH2 <- hist(MFdata$vvent, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$vvent, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(6, 0.02, paste("Darksky"), cex = 1.2,  col = "black")
text(6, 0.20, paste("Darksky"), cex = 1.2,  col = "black")
text(6, 0.30, paste("Météo France"), cex = 1.2,  col = "blue")
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 0, to= 10, by=1) ## tient compte des deux distributions
hist(DSKdata$windspeed, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean windspeed for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean windspeed (m/s)"
)
HH2 <- hist(MFdata$vvent, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$vvent, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(6, 0.20, paste("Darksky"), cex = 1.2,  col = "black")
text(6, 0.30, paste("Météo France"), cex = 1.2,  col = "blue")
shapiro.test(DSKdata$windspeed) # W = 0.98046, p-value = 6.908e-11 => p-value significative, l'échantillon ne suit pas une loi normale.
shapiro.test(MFdata$vvent) # W = 0.9784, p-value = 2.414e-12 => p-value significative, l'échantillon ne suit pas une loi normale.
### t.test entre les différentes températures
t.test(MFdata$vvent,DSKdata$windspeed) # t = -0.34466, df = 2233.7, p-value = 0.7304 => p-value non significative, les 2 échantillons ne sont pas significativement différents !
d1 <- subset(DSKdata, select = c("windspeed", "origine")) ## création du subset venant de DSK http://larmarange.github.io/analyse-R/fusion-de-tables.html
dim(d1)
d2 <- subset(MFdata, select = c("vvent", "origine")) ## création du subset venant de MF
dim(d2)
## pour utiliser la fusion "rbind" il faut que les champs aient le même nom (c'est le 1er qui pose problème)
names(d2)[1]
names(d2)[1]<-"windspeed" ## renommage du 1er champ du tableau 2 https://forum.framasoft.org/viewtopic.php?p=75052
names(d2)[1]
kwptrosdata <- rbind(d1, d2) ## fusion des deux sous tableaux
head(kwptrosdata)
summary(kwptrosdata)
kruskal.test(windspeed ~ origine, data = kwptrosdata) ## ~ signifie : "en fonction de"
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$pressure)
length(MFdata$press_mer)
##### et que l'étendue n'est pas la même
range(DSKdata$pressure, na.rm = TRUE)
range(MFdata$press_mer, na.rm = TRUE)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 980, to= 1045, by=2) ## tient compte des deux distributions
hist(DSKdata$pressure, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean pressure for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean pressure (hPa)"
)
HH2 <- hist(MFdata$press_mer, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$press_mer, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(1000, 0.05, paste("Darksky"), cex = 1.2,  col = "black")
text(990, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$visibility)
length(MFdata$visibilité)
length(MFdata$visibilite)
##### et que l'étendue n'est pas la même
range(DSKdata$visibility, na.rm = TRUE)
range(MFdata$visibilite, na.rm = TRUE)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 5, to= 40, by=2) ## tient compte des deux distributions
hist(DSKdata$visibility, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean visibility for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean visibility (km)"
)
HH2 <- hist(MFdata$visibilite, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$visibilite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(20, 0.20, paste("Darksky"), cex = 1.2,  col = "black")
text(30, 0.15, paste("Météo France"), cex = 1.2,  col = "blue")
hist(DSKdata$visibility, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean visibility for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean visibility (km)"
)
HH2 <- hist(MFdata$visibilite, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$visibilite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(17, 0.20, paste("Darksky"), cex = 1.2,  col = "black")
text(35, 0.12, paste("Météo France"), cex = 1.2,  col = "blue")
hist(DSKdata$visibility, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean visibility for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean visibility (km)"
)
HH2 <- hist(MFdata$visibilite, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$visibilite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(17, 0.20, paste("Darksky"), cex = 1.2,  col = "black")
text(32, 0.102, paste("Météo France"), cex = 1.2,  col = "blue")
shapiro.test(DSKdata$visibility) # W = 0.98046, p-value = 6.908e-11 => p-value significative, l'échantillon ne suit pas une loi normale.
shapiro.test(MFdata$visibilite) # W = 0.9784, p-value = 2.414e-12 => p-value significative, l'échantillon ne suit pas une loi normale.
### t.test entre les différentes températures
t.test(MFdata$visibilite,DSKdata$visibility) # t = -0.34466, df = 2233.7, p-value = 0.7304 => p-value non significative, les 2 échantillons ne sont pas significativement différents !
d1 <- subset(DSKdata, select = c("visibility", "origine")) ## création du subset venant de DSK http://larmarange.github.io/analyse-R/fusion-de-tables.html
dim(d1)
d2 <- subset(MFdata, select = c("visibilite", "origine")) ## création du subset venant de MF
dim(d2)
## pour utiliser la fusion "rbind" il faut que les champs aient le même nom (c'est le 1er qui pose problème)
names(d2)[1]
names(d2)[1]<-"visibility" ## renommage du 1er champ du tableau 2 https://forum.framasoft.org/viewtopic.php?p=75052
names(d2)[1]
kwptrosdata <- rbind(d1, d2) ## fusion des deux sous tableaux
head(kwptrosdata)
summary(kwptrosdata)
kruskal.test(visibility ~ origine, data = kwptrosdata) ## ~ signifie : "en fonction de"
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$pressure)
length(MFdata$press_mer)
length(MFdata$press_mer[!is.na(MFdata$press_mer)])
length(MFdata$pressure[!is.na(MFdata$pressure)])
length(MFdata$press_mer)
length(MFdata$press_mer[!is.na(MFdata$press_mer)])
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$pressure)
length(MFdata$pressure[!is.na(MFdata$pressure)])
length(MFdata$press_mer)
length(MFdata$press_mer[!is.na(MFdata$press_mer)])
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$pressure)
colSums(!is.na(DSKdata$pressure))
length(na.omit(DSKdata$pressure))
length(MFdata$press_mer)
length(na.omit(press_mer))
length(na.omit(MFdata$press_mer))
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(na.omit(DSKdata$visibility)
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(na.omit(DSKdata$visibility)
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(na.omit(DSKdata$visibility)
##### et que l'étendue n'est pas la même
range(DSKdata$visibility, na.rm = TRUE)
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(na.omit(DSKdata$visibility)
##### et que l'étendue n'est pas la même
range(DSKdata$visibility, na.rm = TRUE)
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(na.omit(DSKdata$pressure)
length(na.omit(MFdata$press_mer)
##### et que l'étendue n'est pas la même
range(DSKdata$pressure, na.rm = TRUE)
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(na.omit(DSKdata$pressure))
length(na.omit(MFdata$press_mer)
##### et que l'étendue n'est pas la même
range(DSKdata$pressure, na.rm = TRUE)
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$pressure)
length(na.omit(DSKdata$pressure))
length(MFdata$press_mer)
length(na.omit(MFdata$press_mer))
summa
summary(DSKdata)
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$temperature)
length(na.omit(DSKtemperature))
length(na.omit(DSKdata$temperature))
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$temperature)
length(na.omit(DSKdata$temperature))
length(MFdata$temperature)
length(na.omit(MFdata$temperature))
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$humidity)
length(na.omit(DSKdata$humidity)) ## pour tester si NA
length(MFdata$humidite)
length(na.omit(MFdata$humidite)) ## pour tester si NA
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$dewpoint)
length(na.omit(DSKdata$dewpoint)) ## pour tester si NA
length(MFdata$point_rose)
length(na.omit(MFdata$point_rose)) ## pour tester si NA
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$humidity)
length(na.omit(DSKdata$humidity)) ## pour tester si NA
length(MFdata$humidite)
length(na.omit(MFdata$humidite)) ## pour tester si NA
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$temperature)
length(na.omit(DSKdata$temperature)) ## pour tester si NA
length(MFdata$temperature)
length(na.omit(MFdata$temperature)) ## pour tester si NA
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$humidity)
length(na.omit(DSKdata$humidity)) ## pour tester si NA
length(MFdata$humidite)
length(na.omit(MFdata$humidite)) ## pour tester si NA
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$windspeed)
length(na.omit(DSKdata$windspeed)) ## pour tester si NA
length(MFdata$vvent)
length(na.omit(MFdata$vvent)) ## pour tester si NA
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$visibility)
length(na.omit(DSKdata$visibility)) ## pour tester si NA
length(MFdata$visibilite)
length(na.omit(MFdata$visibilite)) ## pour tester si NA
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$pressure)
length(na.omit(DSKdata$pressure))
length(MFdata$press_mer)
length(na.omit(MFdata$press_mer))
summary(DSKdata)
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$cloudcover)
length(na.omit(DSKdata$cloudcover)) ## pour tester si NA
length(MFdata$visibilite)
length(na.omit(MFdata$visibilite)) ## pour tester si NA
##### et que l'étendue n'est pas la même
range(DSKdata$cloudcover, na.rm = TRUE)
range(MFdata$nebulosite, na.rm = TRUE)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 5, to= 100, by=2) ## tient compte des deux distributions
hist(DSKdata$cloudcover, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean cloudcover for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean cloudcover (hPa)"
)
hist(DSKdata$cloudcover, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean cloudcover for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean cloudcover (%)"
)
HH2 <- hist(MFdata$nebulosite, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$nebulosite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(40, 0.01, paste("Darksky"), cex = 1.2,  col = "black")
text(60, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
hist(DSKdata$cloudcover, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean cloudcover for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean cloudcover (%)"
)
HH2 <- hist(MFdata$nebulosite, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$nebulosite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(40, 0.01, paste("Darksky"), cex = 1.2,  col = "black")
text(60, 0.035, paste("Météo France"), cex = 1.2,  col = "blue")
hist(DSKdata$cloudcover, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean cloudcover for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean cloudcover (%)"
)
HH2 <- hist(MFdata$nebulosite, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$nebulosite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(40, 0.015, paste("Darksky"), cex = 1.2,  col = "black")
text(55, 0.030, paste("Météo France"), cex = 1.2,  col = "blue")
shapiro.test(DSKdata$cloudcover) # W = 0.98046, p-value = 6.908e-11 => p-value significative, l'échantillon ne suit pas une loi normale.
shapiro.test(MFdata$nebulosite) # W = 0.9784, p-value = 2.414e-12 => p-value significative, l'échantillon ne suit pas une loi normale.
### t.test entre les différentes températures
t.test(MFdata$nebulosite,DSKdata$cloudcover) # t = -0.34466, df = 2233.7, p-value = 0.7304 => p-value non significative, les 2 échantillons ne sont pas significativement différents !
d1 <- subset(DSKdata, select = c("cloudcover", "origine")) ## création du subset venant de DSK http://larmarange.github.io/analyse-R/fusion-de-tables.html
dim(d1)
d2 <- subset(MFdata, select = c("nebulosite", "origine")) ## création du subset venant de MF
dim(d2)
## pour utiliser la fusion "rbind" il faut que les champs aient le même nom (c'est le 1er qui pose problème)
names(d2)[1]
names(d2)[1]<-"cloudcover" ## renommage du 1er champ du tableau 2 https://forum.framasoft.org/viewtopic.php?p=75052
names(d2)[1]
kwptrosdata <- rbind(d1, d2) ## fusion des deux sous tableaux
head(kwptrosdata)
summary(kwptrosdata)
kruskal.test(cloudcover ~ origine, data = kwptrosdata) ## ~ signifie : "en fonction de"
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$windgust)
length(na.omit(DSKdata$windgust)) ## pour tester si NA
length(MFdata$rafale_10min)
length(na.omit(MFdata$rafale_10min)) ## pour tester si NA
##### et que l'étendue n'est pas la même
range(DSKdata$windgust, na.rm = TRUE)
range(MFdata$rafale_10min, na.rm = TRUE)
length(na.omit(MFdata$nebulosite)) ## pour tester si NA
length(MFdata$nebulosite)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= 2, to= 25, by=1) ## tient compte des deux distributions
hist(DSKdata$windgust, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean windgust for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean windgust (m/s)"
)
HH2 <- hist(MFdata$rafale_10min, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$rafale_10min, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(16, 0.05, paste("Darksky"), cex = 1.2,  col = "black")
text(10, 0.12, paste("Météo France"), cex = 1.2,  col = "blue")
hist(DSKdata$windgust, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean windgust for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean windgust (m/s)"
)
HH2 <- hist(MFdata$rafale_10min, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$rafale_10min, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(16, 0.05, paste("Darksky"), cex = 1.2,  col = "black")
text(13, 0.12, paste("Météo France"), cex = 1.2,  col = "blue")
shapiro.test(DSKdata$windgust) # W = 0.98046, p-value = 6.908e-11 => p-value significative, l'échantillon ne suit pas une loi normale.
shapiro.test(MFdata$rafale_10min) # W = 0.9784, p-value = 2.414e-12 => p-value significative, l'échantillon ne suit pas une loi normale.
### t.test entre les différentes températures
t.test(MFdata$rafale_10min,DSKdata$windgust) # t = -0.34466, df = 2233.7, p-value = 0.7304 => p-value non significative, les 2 échantillons ne sont pas significativement différents !
d1 <- subset(DSKdata, select = c("windgust", "origine")) ## création du subset venant de DSK http://larmarange.github.io/analyse-R/fusion-de-tables.html
dim(d1)
d2 <- subset(MFdata, select = c("rafale_10min", "origine")) ## création du subset venant de MF
dim(d2)
## pour utiliser la fusion "rbind" il faut que les champs aient le même nom (c'est le 1er qui pose problème)
names(d2)[1]
names(d2)[1]<-"windgust" ## renommage du 1er champ du tableau 2 https://forum.framasoft.org/viewtopic.php?p=75052
names(d2)[1]
kwptrosdata <- rbind(d1, d2) ## fusion des deux sous tableaux
head(kwptrosdata)
summary(kwptrosdata)
kruskal.test(windgust ~ origine, data = kwptrosdata) ## ~ signifie : "en fonction de"
####Après avoir vérifié que le nombre d'obs n'est pas égal avec
length(DSKdata$precipintensity)
length(na.omit(DSKdata$precipintensity)) ## pour tester si NA
length(MFdata$precip_24h)
length(na.omit(MFdata$precip_24h)) ## pour tester si NA
##### et que l'étendue n'est pas la même
range(DSKdata$precipintensity, na.rm = TRUE)
range(MFdata$precip_24h, na.rm = TRUE)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= -1, to= 16, by=1) ## tient compte des deux distributions
hist(DSKdata$precipintensity, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean precipintensity for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean precipintensity (hPa)"
)
#### on définit les breaks pour l'abscisse commune
BRt <- seq(from= -1, to= 16, by=0.1) ## tient compte des deux distributions
hist(DSKdata$precipintensity, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean precipintensity for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean precipintensity (hPa)"
)
HH2 <- hist(MFdata$precip_24h, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$precip_24h, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(3, 3, paste("Darksky"), cex = 1.2,  col = "black")
text(3, 1, paste("Météo France"), cex = 1.2,  col = "blue")
hist(DSKdata$precipintensity, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Mean precipintensity for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean precipintensity (mm/h)"
)
HH2 <- hist(MFdata$precip_24h, breaks = BRt,  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(MFdata$precip_24h, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(3, 3, paste("Darksky"), cex = 1.2,  col = "black")
text(3, 1, paste("Météo France"), cex = 1.2,  col = "blue")
shapiro.test(DSKdata$precipintensity) # W = 0.98046, p-value = 6.908e-11 => p-value significative, l'échantillon ne suit pas une loi normale.
shapiro.test(MFdata$precip_24h) # W = 0.9784, p-value = 2.414e-12 => p-value significative, l'échantillon ne suit pas une loi normale.
### t.test entre les différentes températures
t.test(MFdata$precip_24h,DSKdata$precipintensity) # t = -0.34466, df = 2233.7, p-value = 0.7304 => p-value non significative, les 2 échantillons ne sont pas significativement différents !
d1 <- subset(DSKdata, select = c("precipintensity", "origine")) ## création du subset venant de DSK http://larmarange.github.io/analyse-R/fusion-de-tables.html
dim(d1)
d2 <- subset(MFdata, select = c("precip_24h", "origine")) ## création du subset venant de MF
dim(d2)
## pour utiliser la fusion "rbind" il faut que les champs aient le même nom (c'est le 1er qui pose problème)
names(d2)[1]
names(d2)[1]<-"precipintensity" ## renommage du 1er champ du tableau 2 https://forum.framasoft.org/viewtopic.php?p=75052
names(d2)[1]
kwptrosdata <- rbind(d1, d2) ## fusion des deux sous tableaux
head(kwptrosdata)
summary(kwptrosdata)
kruskal.test(precipintensity ~ origine, data = kwptrosdata) ## ~ signifie : "en fonction de"
## 1.1 XPS13
setwd("C:/3VG/MSH/lyme/Smartick17/pycitique/data/donnee_signalements_avec_meteo_dsk")
getwd()
#Remove all objects
rm(list = ls() )
rm()
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("../../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("E:/3VG/MSH/lyme/Smartick17/pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("C:/3VG/MSH/lyme/Smartick17/pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("C:/3VG/MSH/lyme/Smartick17/pycitique/data/donnee_signalements_avec_meteo_dsk/citik_animaux_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("C:/3VG/MSH/lyme/Smartick17/pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("../../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
### Or, if .csv file, use this si données séparées par ";"
humdata <- read.csv("../../../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", header = TRUE, sep = ";", dec = ".")
