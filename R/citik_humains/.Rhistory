ptype
qplot(x,y,color=ptype,shape=ptype)
library(ggplot2, lib.loc = "/usr/lib/R/site-library")
detach("package:ggplot2", unload = TRUE)
library(ggplot2, lib.loc = "/usr/lib/R/site-library")
qplot(x,y,color=ptype,shape=ptype)
qplot(x,y)
qplot(x,y,color=ptype,shape=ptype) + geom_point(size=4) +
geom_line(mapping=aes(group=1),color="black",lty=2)# +
qplot(x,y, color=ptype, shape=ptype) + geom_point(size=4) +
geom_line( color="black", lty=2)# +
qplot(x,y, color=ptype, shape=ptype) + geom_point(size=4) +
geom_line(mapping=aes(group=1), color="black", lty=2) +
geom_hline(mapping=aes(yintercept=c(-5,5)),color="red")# +
qplot(x,y, color=ptype, shape=ptype) + geom_point(size=4) +
geom_line(mapping=aes(group=1), color="black", lty=2) +
geom_hline(mapping=aes(yintercept=c(-5,5)), color="red") +
geom_segment(mapping=aes(x=5,y=-5,xend=5,yend=5),color="red",lty=3) +
geom_segment(mapping=aes(x=15,y=-5,xend=15,yend=5),color="red",lty=3)
source('~/Developer/R/ggplot2/ggplot2_training.R', echo=TRUE)
require(ggplot2)
source('~/Developer/R/ggplot2/ggplot2_training.R', echo=TRUE)
humdata <- read.csv(  "../../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
DSKdata <- read.csv("../../pycitique/data/donnee_meteo_nationale_comparative/darksky/darksky_donnee_brute_700_def3.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
getwd()
setwd("./")
humdata <- read.csv(  "../../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
humdata <- read.csv(  "../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
humdataAL <- subset(humdata, humdata$departement_code == "54" |  humdata$departement_code == "55" |  humdata$departement_code == "57" |  humdata$departement_code == "88" |  humdata$departement_code == "67" | humdata$departement_code == "68")
View(humdataAL)
humdata$departement_code == '54'|'55'|'57'|'67'|'68'|'88'
humdata$departement_code == ('54'|'55'|'57'|'67'|'68'|'88')
humdata$departement_code == c('54'|'55'|'57'|'67'|'68'|'88')
humdata[humdata$departement_code == c('54','55','57','67','68','88')]
humdata[humdata$departement_code == c('54','55','57','67','68','88'),]
subset <-  humdata[humdata$departement_code == c('54','55','57','67','68','88'),]
View(subset)
subset <-  humdata[humdata$departement_code == '54','55','57','67','68','88',]
c(
c(
subset <-  humdata[humdata$departement_code == c('54','55','57','67','68','88'),]
View(subset)
View(subset)
del(subset)
rm(subset)
subset <-  humdata[humdata$departement_code == c('54','55','57','67','68','88'),]
View(subset)
subset_region <-  humdata[humdata$region == 'Grand Est']
subset_region <-  humdata[humdata$region == 'Grand Est']
subset_region <-  humdata[humdata$region == 'Grand Est',]
View(subset_region)
subset <-  humdata[ c('54','55','57','67','68','88'),]
View(subset)
humdataAL <- subset(humdata, humdata$departement_code == "54" |  "55" | "57" | "88" |  "67" | "68")
humdataAL <- subset(humdata, humdata$departement_code == c('54','55','57','67','68','88'))
View(humdataAL)
subset <-  humdata[humdata$departement_code == c('54','55','57','67','68','88'),]
1 + TRUE
humdata[1:4,1:9]
getwd()
humdata <- read.csv(  "../../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
humdata <- read.csv(  "../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
?grep
### Assignation du chemin de travail:
setwd("./")
getwd()
## 2.1 Toutes durées confondues
humdatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
anidatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_animaux_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
## pour connaître l'effectif
table(anidatatot$qui_pique)
library("lubridate")
library("magrittr")
library("FactoMineR")
library("dplyr")
library("dplyr")
library("ggplot2")
library("scales")
getwd()
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/smartick_time_series_anim_hum_kh.R', echo=TRUE)
## seulement pour les signalements >= 15/07/2020
humdata  <- subset(humdatatot, humdatatot$datepiq_YMD > "2017-07-14")
humdatatot[humdatatot$date_piqure_saisie > '2017-07-14']
humdatatot[humdatatot$date_piqure_saisie > '2017-07-14',]
dateset <- humdatatot[humdatatot$date_piqure_saisie > '2017-07-14',]
View(dateset)
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+gem_line()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_line()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_point()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_path()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_line()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_line(aes(color='blue'))
ggplot(dateset, aes(date_piqure_saisie, nbr_tique, colour='blue'))+geom_line()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique, color='blue'))+geom_line()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique, color='grey'))+geom_line()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_line(color='blue')
ggplot(dateset, aes(date_piqure_saisie, nbr_tique, colour=sex_pique))+geom_line()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique, colour=sex_pique))+geom_point()
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_point()+facette_wrap(~sex_pique)
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_point()+facet_wrap(~sex_pique)
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_point()+facet_wrap(~region)
ggplot(dateset, aes(date_piqure_saisie, nbr_tique))+geom_point(color='blue')+facet_wrap(~region)
ggplot(dateset, aes(date_piqure_saisie, nbr_tique, class=sex_pique))+geom_point(color='blue')+facet_wrap(~region)
ggplot(dateset, aes(date_piqure_saisie, nbr_tique, colour=sex_pique))+geom_point(color='blue')+facet_wrap(~region)
ggplot(dateset, aes(date_piqure_saisie, nbr_tique, colour=sex_pique))+geom_point()+facet_wrap(~region)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/smartick_time_series_anim_hum_kh.R', echo=TRUE)
### Assignation du chemin de travail:
setwd("./")
getwd()
## 2.1 Toutes durées confondues
humdatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
anidatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_animaux_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
table(anidatatot$qui_pique) ## pour connaître l'effectif
# install.packages(c("lubridate", "magrittr")) ##♥ https://fr.wikibooks.org/wiki/Programmer_en_R/Manipuler_les_dates_et_les_heures
library("lubridate")
library("magrittr")
time_length(interval(start = ymd("2017-07-15"), end = today()), unit = "days")
time_length(interval(start = ymd("2017-07-15"), end = ymd("2020-04-05")), unit = "days")
source('~/.active-rstudio-document', echo=TRUE)
humdatatot$datenum <- time_length(interval(start = ymd(humdatatot$date_piqure_saisie), end =  today()), unit = "days")  ## à l'envers
# humdatatot$datenum=time_length(interval(start = today(), end = ymd(humdatatot$date_piqure_saisie)), unit = "days") ## à l'endroit
range(humdatatot$datenum, na.rm = TRUE)
## création d'un champ date "datepiq_YMD" où "humdatatot$date_piqure_saisie" de char devient date
humdatatot$datepiq_YMD <- ymd(humdatatot$date_piqure_saisie)
humdatatot$nbr <- 1  ##
humdata  <- subset(humdatatot, humdatatot$datepiq_YMD > "2017-07-14") ## seulement pour les signalements >= 15/07/2020
range(humdata$datenum, na.rm = TRUE)
anidatatot$datenum <- time_length(interval(start = ymd(anidatatot$date_piqure_saisie), end = today()), unit = "days")
anidatatot$datenum <- time_length(interval(start = ymd(anidatatot$date_piqure_saisie), end = today()), unit = "days")
range(anidatatot$datenum, na.rm = TRUE)
## création d'un champ date "datepiq_YMD" où "anidatatot$date_piqure_saisie" de char devient date
anidatatot$datepiq_YMD <- ymd(anidatatot$date_piqure_saisie)
anidatatot$nbr <- 1  ##
anidata  <- subset(anidatatot, anidatatot$datepiq_YMD > "2017-07-14") ## seulement pour les signalements >= 15/07/2020
range(anidata$datenum, na.rm = TRUE)
anidatachat <- subset(anidata, anidata$qui_pique == "Chat")
anidatachien <- subset(anidata, anidata$qui_pique == "Chien")
humdataAL <- subset(humdata, humdata$departement_code == "08" | humdata$departement_code == "10" | humdata$departement_code == "51" | humdata$departement_code == "52" | humdata$departement_code == "54" |  humdata$departement_code == "55" |  humdata$departement_code == "57" |  humdata$departement_code == "67" | humdata$departement_code == "68" | humdata$departement_code == "88")
# DSKdataAL <- subset(DSKdata, DSKdata$departement_code == "08" | DSKdata$departement_code == "10" | DSKdata$departement_code == "51" | DSKdata$departement_code == "52" | DSKdata$departement_code == "54" |  DSKdata$departement_code == "55" |  DSKdata$departement_code == "57" |  DSKdata$departement_code == "67" | DSKdata$departement_code == "68" | DSKdata$departement_code == "88")
anidataAL <- subset(anidata, anidata$departement_code == "08" | anidata$departement_code == "10" | anidata$departement_code == "51" | anidata$departement_code == "52" | anidata$departement_code == "54" |  anidata$departement_code == "55" |  anidata$departement_code == "57" |  anidata$departement_code == "67" | anidata$departement_code == "68" | anidata$departement_code == "88")
# anidatachat
# anidatachien
humdataIDF <- subset(humdata, humdata$departement_code == "75" |  humdata$departement_code == "77" |  humdata$departement_code == "78" |  humdata$departement_code == "91" |  humdata$departement_code == "92" | humdata$departement_code == "93" |  humdata$departement_code == "94" | humdata$departement_code == "95")
# DSKdataIDF <- subset(DSKdata, DSKdata$departement_code == "75" |  DSKdata$departement_code == "77" |  DSKdata$departement_code == "78" |  DSKdata$departement_code == "91" |  DSKdata$departement_code == "92" | DSKdata$departement_code == "93" |  DSKdata$departement_code == "94" | DSKdata$departement_code == "95")
anidataIDF <- subset(anidata, anidata$departement_code == "75" |  anidata$departement_code == "77" |  anidata$departement_code == "78" |  anidata$departement_code == "91" |  anidata$departement_code == "92" | anidata$departement_code == "93" |  anidata$departement_code == "94" | anidata$departement_code == "95")
# anidatachat
# anidatachien
remove.packages("FactoMineR", lib="~/.local/bin/R")
######
###### Analyse des signalements depuis le 2017-07-15 (début officiel de signalement tiques)
###### et le "2020-04-05" (le max dans la base humadata)
## Courbe exprimée en fonction du temps :
# shorturl.at/pHMY1
# 1. Introduction
### Assignation du chemin de travail:
setwd("./")
getwd()
## 2.1 Toutes durées confondues
humdatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
anidatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_animaux_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
table(anidatatot$qui_pique) ## pour connaître l'effectif
##      NA? Autre   Chat Cheval  Chien
##      7    124   2208    298   2289
## 2.2 Du 2017-07-15 (début officiel de signalement tiques) et le "2020-04-05" (le max dans la base humadata)
# install.packages(c("lubridate", "magrittr")) ##♥ https://fr.wikibooks.org/wiki/Programmer_en_R/Manipuler_les_dates_et_les_heures
library("lubridate")
library("magrittr")
###♦ Ecart entre le 2017-07-15 et aujourd'hui
time_length(interval(start = ymd("2017-07-15"), end = today()), unit = "days")
# [1] 1215 le 11/11/2020
# [1] 1245 le 11/12/2020
###♦ Ecart entre le 2017-07-15 (début officiel de signalement tiques)  et le "2020-04-05" (le max dans la base humadata)
time_length(interval(start = ymd("2017-07-15"), end = ymd("2020-04-05")), unit = "days")
# [1] 995
###• 2.2.1 humdata
## création d'un champ datenum = date en nombre de jours avec la fct date_length
humdatatot$datenum <- time_length(interval(start = ymd(humdatatot$date_piqure_saisie), end =  today()), unit = "days")  ## à l'envers
# humdatatot$datenum=time_length(interval(start = today(), end = ymd(humdatatot$date_piqure_saisie)), unit = "days") ## à l'endroit
range(humdatatot$datenum, na.rm = TRUE)
# humdatatot$datenum ## tout affiché
## [1]  220 1394  ## à l'envers
## [1] -1402  -228
## création d'un champ date "datepiq_YMD" où "humdatatot$date_piqure_saisie" de char devient date
humdatatot$datepiq_YMD <- ymd(humdatatot$date_piqure_saisie)
## création d'un champ nbr = effectif par jour (numérique remlie de 1)
humdatatot$nbr <- 1  ##
humdata  <- subset(humdatatot, humdatatot$datepiq_YMD > "2017-07-14") ## seulement pour les signalements >= 15/07/2020
# humdata  <- subset(humdatatot, humdatatot$datenum > -1223) ## seulement pour les signalements > 15/07/2020
range(humdata$datenum, na.rm = TRUE)
##♠ [1]  220 1215  ## à l'envers
##♠ [1] -1222  -228
###• 2.2.2 anidata
anidatatot$datenum <- time_length(interval(start = ymd(anidatatot$date_piqure_saisie), end = today()), unit = "days")
range(anidatatot$datenum, na.rm = TRUE)
## [1]  257 1398
## création d'un champ date "datepiq_YMD" où "anidatatot$date_piqure_saisie" de char devient date
anidatatot$datepiq_YMD <- ymd(anidatatot$date_piqure_saisie)
## création d'un champ nbr = effectif par jour (numérique remlie de 1)
anidatatot$nbr <- 1  ##
anidata  <- subset(anidatatot, anidatatot$datepiq_YMD > "2017-07-14") ## seulement pour les signalements >= 15/07/2020
# anidata  <- subset(anidatatot, anidatatot$datenum < 1216) ## seulement pour les signalements > 15/07/2020
range(anidata$datenum, na.rm = TRUE)
##♠ [1]  257 1215
anidatachat <- subset(anidata, anidata$qui_pique == "Chat")
anidatachien <- subset(anidata, anidata$qui_pique == "Chien")
## 2.3 Création des subsets
### Création des subset pour l'AL
humdataAL <- subset(humdata, humdata$departement_code == "08" | humdata$departement_code == "10" | humdata$departement_code == "51" | humdata$departement_code == "52" | humdata$departement_code == "54" |  humdata$departement_code == "55" |  humdata$departement_code == "57" |  humdata$departement_code == "67" | humdata$departement_code == "68" | humdata$departement_code == "88")
# DSKdataAL <- subset(DSKdata, DSKdata$departement_code == "08" | DSKdata$departement_code == "10" | DSKdata$departement_code == "51" | DSKdata$departement_code == "52" | DSKdata$departement_code == "54" |  DSKdata$departement_code == "55" |  DSKdata$departement_code == "57" |  DSKdata$departement_code == "67" | DSKdata$departement_code == "68" | DSKdata$departement_code == "88")
anidataAL <- subset(anidata, anidata$departement_code == "08" | anidata$departement_code == "10" | anidata$departement_code == "51" | anidata$departement_code == "52" | anidata$departement_code == "54" |  anidata$departement_code == "55" |  anidata$departement_code == "57" |  anidata$departement_code == "67" | anidata$departement_code == "68" | anidata$departement_code == "88")
# anidatachat
# anidatachien
### Création des subset pour l'IDF
humdataIDF <- subset(humdata, humdata$departement_code == "75" |  humdata$departement_code == "77" |  humdata$departement_code == "78" |  humdata$departement_code == "91" |  humdata$departement_code == "92" | humdata$departement_code == "93" |  humdata$departement_code == "94" | humdata$departement_code == "95")
# DSKdataIDF <- subset(DSKdata, DSKdata$departement_code == "75" |  DSKdata$departement_code == "77" |  DSKdata$departement_code == "78" |  DSKdata$departement_code == "91" |  DSKdata$departement_code == "92" | DSKdata$departement_code == "93" |  DSKdata$departement_code == "94" | DSKdata$departement_code == "95")
anidataIDF <- subset(anidata, anidata$departement_code == "75" |  anidata$departement_code == "77" |  anidata$departement_code == "78" |  anidata$departement_code == "91" |  anidata$departement_code == "92" | anidata$departement_code == "93" |  anidata$departement_code == "94" | anidata$departement_code == "95")
# anidatachat
# anidatachien
## 2.1 Analyse du tableau de données
ls(humdata) ## liste les variables
# ls(DSKdata)
ls(anidata)
str(humdata) ##  a diagnostic function and an alternative to summary
# str(DSKdata)
str(anidata)
summary(humdata)
# summary(DSKdata)
summary(anidata)
### 2.2 Impression de la matrice avec la librairie FactoMineR
library(FactoMineR)
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
humdata_dates <- strptime(humdata$date_piqure_saisie, "%Y-%m-%d")  # Pour accéder à d'autres formats de temps : https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/strptime.
Sys.setlocale("LC_TIME", lct)
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
anidatachat_dates = strptime(anidatachat$date_piqure_saisie, "%Y-%m-%d")  # Pour accéder à d'autres formats de temps : https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/strptime.
Sys.setlocale("LC_TIME", lct)
#anidatachat_dates
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
anidatachien_dates = strptime(anidatachien$date_piqure_saisie, "%Y-%m-%d")  # Pour accéder à d'autres formats de temps : https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/strptime.
Sys.setlocale("LC_TIME", lct)
# anidatachien_dates
library("dplyr")
wdata = data.frame(humdata)
mu <- wdata %>%
group_by(datepiq_YMD) %>%
summarise(grp.sum = sum(nbr))
mu
p <- ggplot(mu, aes(x=datepiq_YMD)) +
geom_line(aes(y = grp.sum), color = "darkred")
# Format : Semaine
p + scale_x_date(date_labels = "%U")
# Format : mois/année
p + scale_x_date(date_labels = "%b/%y")
# Définir les limites de l'axe c(min, max)
min <- as.Date("2017-07-15")
ggplot(mu, aes(x=datepiq_YMD)) +
geom_line(aes(y = grp.sum), color = "darkred")
library('ggplot')
library('ggplot2')
ggplot(mu, aes(x=datepiq_YMD)) +
geom_line(aes(y = grp.sum), color = "darkred")
p <- ggplot(mu, aes(x=datepiq_YMD)) +
geom_line(aes(y = grp.sum), color = "darkred")
# Format : Semaine
p + scale_x_date(date_labels = "%U")
# Format : mois/année
p + scale_x_date(date_labels = "%b/%y")
p
# Définir les limites de l'axe c(min, max)
min <- as.Date("2017-07-15")
max <- NA
p + scale_x_date(limits = c(min, max), date_labels = "%b/%y")
p + scale_x_continuous(breaks = seq(min, max, by = "%b/%y"))
ggplot(humdata, aes(x=datepiq_YMD)) +
geom_line(aes(y = nbr), color = "darkred") +
geom_line(aes(y = nbr_tique), color="steelblue", linetype="twodash")
par(las = 2) ## 2 = always perpendicular to the axis,
barplot(table(humdata$datepiq_YMD))
dotchart(as.numeric(table(humdata$datepiq_YMD)))
hist(humdata$datepiq_YMD, breaks = "days")
compt <- as.data.frame(table(humdata$datepiq_YMD))
compt[,1] <- as.Date(compt[,1])
plot(x=compt[,1], y=compt[,2], type = "b", pch = 19, las = 1, xlab = "Temps", ylab = "Effectif",
ylim = c(0, max(y)))
humDate <- ymd(humdata$date_piqure_saisie)
humDate
class(humDate)
df <- data.frame(
date = humDate)
head(df)
## sauf que ici pas de frequency calculé = message d'erreur
p <- ggplot(data = df, aes(x = date, y = frequency)) +
geom_line(color = "steelblue")
p  + scale_x_date(date_labels = "%B / %Y")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
## sauf que ici pas de frequency calculé = message d'erreur
p <- ggplot(data = df, aes(x = date, y = frequency)) +
geom_line(color = "steelblue")
ggplot(data = df, aes(x = date, y = frequency)) +
geom_line(color = "steelblue")
## sauf que ici pas de frequency calculé = message d'erreur
p <- ggplot(df, aes(x = date, y = frequency)) +
geom_line(color = "steelblue")
ggplot(df, aes(x = date, y = frequency)) +
geom_line(color = "steelblue")
View(df)
## sauf que ici pas de frequency calculé = message d'erreur
p <- ggplot(df, aes(x = date)) +
geom_line(color = "steelblue")
ggplot(df, aes(x = date)) +
geom_line(color = "steelblue")
## sauf que ici pas de frequency calculé = message d'erreur
p <- ggplot(df, aes(x = date)) +
geom_histogram(color = "steelblue")
ggplot(df, aes(x = date)) +
geom_histogram(color = "steelblue")
## sauf que ici pas de frequency calculé = message d'erreur
p <- ggplot(df, aes(x = date)) +
geom_freqpoly(color = "steelblue")
ggplot(df, aes(x = date)) +
geom_freqpoly(color = "steelblue")
## sauf que ici pas de frequency calculé = message d'erreur
p <- ggplot(df, aes(x = date)) +
geom_freqpoly(color = "steelblue", binwidth=1)
ggplot(df, aes(x = date)) +
geom_freqpoly(color = "steelblue", binwidth=1)
p  + scale_x_date(date_labels = "%B / %Y")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
wdatahum <- data.frame(
sexpique = humdata$sex_pique,
nbtique = humdata$nbr_tique,
x = 1)
wdatahum <- data.frame(
sexpique = humdata$sex_pique,
nbtique = humdata$nbr_tique,
x = 1)
mu <- wdatahum %>%
group_by(sexpique) %>%
summarise(grp.mean = mean(nbtique))
library("dplyr")
mu
theme_set(
theme_classic() +
theme(legend.position = "top")
)
ggplot(wdatahum, aes(x = nbtique))
a <- ggplot(wdatahum, aes(x = nbtique))
a + geom_histogram(bins = 30, color = "black", fill = "gray") +
geom_vline(aes(xintercept = mean(nbtique)),
linetype = "dashed", size = 0.6)
library(scales)
freqs <- aggregate(humDate, by=list(humDate), FUN=length) # calcul la freq de humdate en prenant la liste de ts les humdate en fct de leur longueur (!)
freqs$names <- as.Date(freqs$Group.1, format="%Y-%m-%d")
head(freqs$names)
head(freqs$Group.1)
ggplot(freqs, aes(x=names, y=x)) + geom_line() +
scale_x_date(breaks="2 month", labels = date_format("%Y-%m"), # %m en chiffres, %b en lettres (français) abrégées, %B en lettres (français) in extenso
limits=c(as.Date("2017-07-15"),as.Date("2020-04-05"))) +
ylab("Frequency") + xlab("Year and Month") +
theme_bw()
p <- ggplot(freqs, aes(x=names, y=x)) + geom_line() +
scale_x_date(breaks="2 month", labels = date_format("%Y-%m"), # %m en chiffres, %b en lettres (français) abrégées, %B en lettres (français) in extenso
limits=c(as.Date("2017-07-15"),as.Date("2020-04-05"))) +
ylab("Frequency") + xlab("Year and Month") +
theme_bw()
p
p + theme(axis.text.x = element_text(angle=90)) ## https://www.datanovia.com/en/fr/blog/ggplot-graduations-des-axes-definir-et-pivoter-les-textes/
ggplot(freqs, aes(x=names, y=x)) + geom_line() +
scale_x_date(breaks="2 month", labels = date_format("%Y-%m"), # %m en chiffres, %b en lettres (français) abrégées, %B en lettres (français) in extenso
limits=c(as.Date("2017-07-15"),as.Date("2020-04-05"))) +
ylab("Frequency") + xlab("Year and Month") +
theme_bw()
p
p + theme(axis.text.x = element_text(angle=90)) ## https://www.datanovia.com/en/fr/blog/ggplot-graduations-des-axes-definir-et-pivoter-les-textes/
# Définir les limites de l'axe c(min, max) mais on perd les mois !
min <- as.Date("2017-07-15")
max <- NA
p + theme(axis.text.x = element_text(angle=90)) + scale_x_date(limits = c(min, max)) # ce "scale_x_date" annule le précédent
p + theme(axis.text.x = element_blank(), axis.ticks = element_blank()) # élimine les dates de l'axe des x !
ggplot(freqs, aes(x=names, y=x)) + geom_line() +
scale_x_date(breaks="2 month", labels = date_format("%Y-%m"), # %m en chiffres, %b en lettres (français) abrégées, %B en lettres (français) in extenso
limits=c(as.Date("2017-07-15"),as.Date("2020-04-05"))) +
ylab("Frequency") + xlab("Year and Month") +
theme_bw() + theme(axis.text.x = element_text(angle=90)) ## https://www.datanovia.com/en/fr/blog/ggplot-graduations-des-axes-definir-et-pivoter-les-textes/
# Définir les limites de l'axe c(min, max) mais on perd les mois !
min <- as.Date("2017-07-15")
max <- NA
p + theme(axis.text.x = element_text(angle=90)) + scale_x_date(limits = c(min, max)) # ce "scale_x_date" annule le précédent
p + theme(axis.text.x = element_blank(), axis.ticks = element_blank()) # élimine les dates de l'axe des x !
p
#### vérifié que le nombre d'obs n'est pas égal entre les tableaux
length(humdata_dates)
# [1] 12864
length(na.omit(humdata_dates)) ## pour tester si NA
length(anidata$datenum)
# [1] 4668
length(na.omit(anidata$datenum)) ## pour tester si NA
##### et que l'étendue n'est pas la même
range(humdata$datenum, na.rm = TRUE)
range(DSKdata$date_releve, na.rm = TRUE)
length(anidata$datenum)
# [1] 4668
length(na.omit(anidata$datenum)) ## pour tester si NA
##### et que l'étendue n'est pas la même
range(humdata$datenum, na.rm = TRUE)
range(DSKdata$date_releve, na.rm = TRUE)
range(anidata$datenum, na.rm = TRUE)
range(anidatachat$datenum, na.rm = TRUE)
range(anidatachien$datenum, na.rm = TRUE)
### on calcule le nb de lignes des tableaux (pour l'habillage des histogrammes)
nrhum <- nrow(humdata_dates)
nrdsk <- nrow(DSKdata)
nrani <- nrow(anidata)
nranichat <- nrow(anidatachat)
nranichien <- nrow(anidatachien)
##### et que l'étendue n'est pas la même
range(humdata$datepiq_YMD, na.rm = TRUE)
range(anidata$datepiq_YMD, na.rm = TRUE)
range(anidatachat$datepiq_YMD, na.rm = TRUE)
range(anidatachien$datepiq_YMD, na.rm = TRUE)
### on calcule le nb de lignes des tableaux (pour l'habillage des histogrammes)
nrhum <- nrow(humdata)
nrani <- nrow(anidata)
nranichat <- nrow(anidatachat)
nranichien <- nrow(anidatachien)
#### on définit les breaks pour l'abscisse commune qui tient compte des deux distributions
BRt <- seq(from= 2017-08-10, to= 2020-04-05, by=1) ## à l'envers
hist(humdata$datepiq_YMD,
"week", # break
axes=F,
freq=T, # fréquences si True, densité si False
col="grey",
main = "Distribution of ticks' reporting \n (France, july 2017 - april 2020), 995 days",
ylab = "Frequency",
xlab = "Dates of reporting"
)
axis.POSIXct(2,
at=seq(from=strptime("2017-08-10","%Y-%m-%d" ),
to=strptime("2020-04-05","%Y-%m-%d"),
by="years"), format="%Y", las=2) # force indiquant la date de chaque jour
axis(2,c(0:600))
HH2 <- hist(anidata$datepiq_YMD, "week",  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(humdata$datepiq_YMD, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(-750, 0.003, paste("Human"), cex = 1.2,  col = "black")
text(-700, 0.002, paste("Animals"), cex = 1.2,  col = "blue")
### calcul des paramètres pour la fonction lines() à superposer à l'histo
HH2 <- hist(anidata$datepiq_YMD, "week",  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(humdata$datepiq_YMD, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(-750, 0.003, paste("Human"), cex = 1.2,  col = "black")
text(-700, 0.002, paste("Animals"), cex = 1.2,  col = "blue")
wilcox.test(humdata$datenum , anidata$datenum) ## comparaison des médianes avec p-value = 7.532e-08 donc différences significatives
p
ggplot(df, aes(x = date)) +
geom_freqpoly(color = "steelblue", binwidth=1)
ggplot(df, aes(x = date)) +
geom_density(color = "steelblue", binwidth=1)
