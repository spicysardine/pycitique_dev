## Shapiro test :
tidy(shapiro.test(dsktemperature))
str(shapiroMF$p-value)
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n####### Shapiro test #######\n")
shapiroDSK <- tidy(shapiro.test(paramDSK))
shapiroMF <- tidy(shapiro.test(paramMF) )
str(shapiroDSK$p-value)
str(shapiroMF$p-value)
cat("\n#######  t.test entre les différentes DSK et MF ",paramName,"#######\n")
Ttest <- t.test(paramDSK, paramMF)
cat( str(Ttest) )
cat("\n####### fabrication des données pour le test KW ",paramName,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=mftemperature, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("\n####### Kruskal-Wallis test ",paramName,"#######\n")
kruskal.test(param ~ type, data = kwdata) ## ~ signifie : "en fonction de"
cat( str( summary(kwtempdata) ) )
#kwtempdata %>% kruskal_effsize(temp ~ type)
cat("\n####### Test de wilcoxon, plus adéquat pour deux groupes de comparaisons ",paramName,"#######\n")
wilcox.test(param ~ type, data = kwdata)
}
######### Test des distributions statistiques
weatherStats(dsktemperature, mftemperature, 'Température C°')
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n####### Shapiro test #######\n")
# shapiroDSK <- tidy(shapiro.test(paramDSK))
# shapiroMF <- tidy(shapiro.test(paramMF) )
# print(shapiroDSK)
# str(shapiroMF$p-value)
print( shapiro.test(paramDSK) )
cat("\n#######  t.test entre les différentes DSK et MF ",paramName,"#######\n")
Ttest <- t.test(paramDSK, paramMF)
cat( str(Ttest) )
cat("\n####### fabrication des données pour le test KW ",paramName,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=mftemperature, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("\n####### Kruskal-Wallis test ",paramName,"#######\n")
kruskal.test(param ~ type, data = kwdata) ## ~ signifie : "en fonction de"
cat( str( summary(kwtempdata) ) )
#kwtempdata %>% kruskal_effsize(temp ~ type)
cat("\n####### Test de wilcoxon, plus adéquat pour deux groupes de comparaisons ",paramName,"#######\n")
wilcox.test(param ~ type, data = kwdata)
}
######### Test des distributions statistiques
weatherStats(dsktemperature, mftemperature, 'Température C°')
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n####### Shapiro test #######\n")
print( shapiro.test(paramDSK) )
print( shapiro.test(paramMF) )
cat("\n#######  t.test entre les différentes DSK et MF ",paramName,"#######\n")
print(t.test(paramDSK, paramMF))
cat("\n####### fabrication des données pour le test KW ",paramName,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=mftemperature, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("#### Objet de donnée pour KW Fabriqué")
print( summary(kwdata) )
cat("\n####### Kruskal-Wallis test ",paramName,"#######\n")
## ~ signifie : "en fonction de"
print( kruskal.test(param ~ type, data = kwdata) )
#kwtempdata %>% kruskal_effsize(temp ~ type)
cat("\n####### Test de wilcoxon, plus adéquat pour deux groupes de comparaisons ",paramName,"#######\n")
print( wilcox.test(param ~ type, data = kwdata) )
}
######### Test des distributions statistiques
weatherStats(dsktemperature, mftemperature, 'Température C°')
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n####### Shapiro test #######\n")
print( shapiro.test(paramDSK) )
print( shapiro.test(paramMF) )
cat("\n#######  t.test entre les différentes DSK et MF ",paramName,"#######\n")
print(t.test(paramDSK, paramMF))
cat("\n####### fabrication des données pour le test KW ",paramName,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=mftemperature, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("Objet de donnée pour KW Fabriqué:")
cat("Sommaire de la donnée")
print( summary(kwdata) )
cat("\n####### Kruskal-Wallis test ",paramName,"#######\n")
## ~ signifie : "en fonction de"
print( kruskal.test(param ~ type, data = kwdata) )
#kwtempdata %>% kruskal_effsize(temp ~ type)
cat("\n####### Test de wilcoxon, plus adéquat pour deux groupes de comparaisons ",paramName,"#######\n")
print( wilcox.test(param ~ type, data = kwdata) )
}
######### Test des distributions statistiques
weatherStats(dsktemperature, mftemperature, 'Température C°')
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n####### Shapiro test #######\n")
print( shapiro.test(paramDSK) )
print( shapiro.test(paramMF) )
cat("\n#######  t.test entre les différentes DSK et MF ",paramName,"#######\n")
print(t.test(paramDSK, paramMF))
cat("\n####### fabrication des données pour le test KW ",paramName,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=mftemperature, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("Objet de donnée pour KW Fabriqué:\n")
cat("Sommaire de la donnée\n")
print( summary(kwdata) )
cat("\n####### Kruskal-Wallis test ",paramName,"#######\n")
## ~ signifie : "en fonction de"
print( kruskal.test(param ~ type, data = kwdata) )
#kwtempdata %>% kruskal_effsize(temp ~ type)
cat("\n####### Test de wilcoxon, plus adéquat pour deux groupes de comparaisons ",paramName,"#######\n")
print( wilcox.test(param ~ type, data = kwdata) )
}
######### Test des distributions statistiques
weatherStats(dsktemperature, mftemperature, 'Température C°')
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n####### Shapiro test #######\n")
print( shapiro.test(paramDSK) )
print( shapiro.test(paramMF) )
cat("\n#######  t.test entre les différentes DSK et MF ",paramName,"#######\n")
print(t.test(paramDSK, paramMF))
cat("\n####### fabrication des données pour le test KW ",paramName,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=mftemperature, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("Objet de donnée pour KW Fabriqué:\n")
cat("Sommaire de la donnée:\n")
print( summary(kwdata) )
cat("\n####### Kruskal-Wallis test ",paramName,"#######\n")
## ~ signifie : "en fonction de"
print( kruskal.test(param ~ type, data = kwdata) )
#kwtempdata %>% kruskal_effsize(temp ~ type)
cat("\n####### Test de wilcoxon, plus adéquat pour deux groupes de comparaisons ",paramName,"#######\n")
print( wilcox.test(param ~ type, data = kwdata) )
}
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n####### Shapiro test #######\n")
print( shapiro.test(paramDSK) )
print( shapiro.test(paramMF) )
cat("\n#######  t.test entre les différentes DSK et MF ",paramName,"#######\n")
print(t.test(paramDSK, paramMF))
cat("\n####### fabrication des données pour le test KW ",paramName,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=mftemperature, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("Objet de donnée pour KW Fabriqué:\n")
cat("Sommaire de la donnée:\n")
print( summary(kwdata) )
cat("\n####### Kruskal-Wallis test ",paramName,"#######\n")
## ~ signifie : "en fonction de"
print( kruskal.test(param ~ type, data = kwdata) )
#kwtempdata %>% kruskal_effsize(temp ~ type)
cat("\n####### Test de wilcoxon, plus adéquat pour deux groupes de comparaisons ",paramName,"#######\n")
print( wilcox.test(param ~ type, data = kwdata) )
}
######### Test des distributions statistiques
weatherStats(dsktemperature, mftemperature, 'Température C°')
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
######### Test de distributions statistiques:
weatherStats(dskhumidity, mfhumidity, 'Humidité %')
########## Test de distributions statistiques:
weatherStats(dskpr, mfpr, 'Point de rosée C°')
########## Test de distributions statistiques:
weatherStats(dskpress, mfpress, 'Pression hPa')
########## Test de distributions statistiques:
weatherStats(dskwindspeed, mfwindspeed, 'Vitesse moyenne')
########## Test de distributions statistiques:
weatherStats(dskvisibility, mfvisibility, 'Visibilité %')
########## Test de distributions statistiques:
weatherStats(dskcloud, mfcloud, 'Nébulosité %')
########## Test de distributions statistiques:
weatherStats(dskwg, mfwg, 'Rafale de vent sur 10 min m/s')
########## Test de distributions statistiques:
weatherStats(dskprecip, mfprecip, 'Précipitation mm/h')
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
# Définition du répertoire de travail. NB: Il n'y null besoin de préciser le chemin absolu.
# "./" signifie répertoire courant
getwd()
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
################ Histogramme de la visibilite moyenne "visibilite" pour MF et "visibility"
weatherHistogram(dskvisibility, mfvisibility, Breaks = 2 ,'Visibilité', '%')
1
################ Histogramme de la visibilite moyenne "visibilite" pour MF et "visibility"
weatherHistogram(dskvisibility, mfvisibility, Breaks = 1 ,'Visibilité', '%')
View(dskdatavg)
View(mfdatavg)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName, SIunit){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName," ",SIunit,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n Fait: voir les grahiques dans la case des Plots de Rstudio \n")
cat("\n####### Shapiro test #######\n")
print( shapiro.test(paramDSK) )
print( shapiro.test(paramMF) )
cat("\n#######  t.test entre les différentes DSK et MF ",paramName," ",SIunit,"#######\n")
print(t.test(paramDSK, paramMF))
cat("\n####### fabrication des données pour le test KW ",paramName," ",SIunit,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=mftemperature, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("Objet de donnée pour KW Fabriqué:\n")
cat("Sommaire de la donnée:\n")
print( summary(kwdata) )
cat("\n####### Kruskal-Wallis test ",paramName," ",SIunit,"#######\n")
## ~ signifie : "en fonction de"
print( kruskal.test(param ~ type, data = kwdata) )
cat("\n####### Test de wilcoxon ",paramName," ",SIunit,"#######\n")
print( wilcox.test(param ~ type, data = kwdata) )
}
tempList <- list(dskParam=dskdatavg$temperature, mfParam=mfdatavg$temperature, Breaks=1, paramName='Température', SIunit='C°')
View(tempList)
templist <- list(dskParam=dskdatavg$temperature, mfParam=mfdatavg$temperature, Breaks=1, paramName='Température', SIunit='C°')
humlist <- list(dskParam=dskdatavg$humidity, mfParam=mfdatavg$humidite, Breaks=1, paramName='Humidité', SIunit='%')
ptrlist <- list(dskParam=dskdatavg$dewpoint, mfParam=mfdatavg$point_rose, Breaks=1, paramName='Point de rosée', SIunit='C°')
presslist <- list(dskParam=dskdatavg$pressure, mfParam=mfdatavg$press_mer, Breaks=1, paramName='Pression', SIunit='hPa')
vvlist <- list(dskParam=dskdatavg$windspeed, mfParam=mfdatavg$vvent, Breaks=0.5, paramName='Vitesse du vent', SIunit='m/s')
visiblist <- list(dskParam=dskdatavg$visibility, mfParam=mfdatavg$visibilite, Breaks=1, paramName='Visibilité', SIunit='%')
neblist <-list(dskParam=dskdatavg$cloudcover, mfParam=mfdatavg$nebulosite, Breaks=2, paramName='Nébulosité', SIunit='%')
raflist <- list(dskParam=dskdatavg$windgust, mfParam=mfdatavg$rafale_10min, Breaks=0.5, paramName='rafale de vent sur 10 min', SIunit='m/s')
preciplist01 <- list(dskParam=dskdatavg$precipintensity, mfParam=mfdatavg$precip_01h, Breaks=2, paramName='Intensité de précipitation 1h', SIunit='%')
preciplist24 <- list(dskParam=dskdatavg$precipintensitymax, mfParam=mfdatavg$precip_24h, Breaks=2, paramName='Intensité de précipitation 24h', SIunit='%')
paramList <- list(templist, humlist, ptrlist, presslist, vvlist, visiblist, neblist, raflist, preciplist01, preciplist24)
for( param in paramlist) {
### Histogramme du paramètres moyennes
# weatherHistogram(dskParam, mfParam, Breaks, paramName, SIunit)
### Test des distributions statistiques
# weatherStats(dskParam, mfParam, paramName)
print("wow!")
}
paramlist <- list(templist, humlist, ptrlist, presslist, vvlist, visiblist, neblist, raflist, preciplist01, preciplist24)
for( param in paramlist) {
### Histogramme du paramètres moyennes
# weatherHistogram(dskParam, mfParam, Breaks, paramName, SIunit)
### Test des distributions statistiques
# weatherStats(dskParam, mfParam, paramName)
print("wow!")
}
length(paramlist)
for( param in paramlist) {
### Histogramme du paramètres moyennes
# weatherHistogram(dskParam, mfParam, Breaks, paramName, SIunit)
### Test des distributions statistiques
# weatherStats(dskParam, mfParam, paramName)
print(param$paramName)
}
### Test des distributions statistiques
# weatherStats(dskParam, mfParam, paramName)
print(param$SIunit)
for( param in paramlist) {
### Histogramme du paramètres moyennes
# weatherHistogram(dskParam, mfParam, Breaks, paramName, SIunit)
### Test des distributions statistiques
# weatherStats(dskParam, mfParam, paramName)
print(param$SIunit)
}
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
### Affectation des variables:
dskprecip <- dskdatavg$precipintensity
mfprecip <- mfdatavg$precip_01h
### Histogramme de la precip_24h moyenne "precip_24h" pour MF et "precipintensity" pour DSK
weatherHistogram(dskprecip, mfprecip, Breaks=0.1, 'intensité de Précipitation', 'mm/h')
########## Test de distributions statistiques:
weatherStats(dskprecip, mfprecip, 'Précipitation mm/h')
### Affectation des variables:
dskprecip24 <- dskdatavg$precipintensitymax
mfprecip24 <- mfdatavg$precip_24h
### Histogramme de la precip_24h moyenne "precip_24h" pour MF et "precipintensity" pour DSK
weatherHistogram(dskprecip24, mfprecip24, Breaks=0.1, 'intensité de Précipitation', 'mm/h')
########## Test de distributions statistiques:
weatherStats(dskprecip24, mfprecip24, 'Précipitation mm/h')
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
120/861
120/861*100
(120/861*100)-1
((120/861)*100)-1
( (120/861)*100)
( (120/861)*100)-100
( 120/861*100 )-100
( (120/861)*100)-100
( (120/861)*100)
( (120/861)*100)-100
(( (120/861)*100)-100)*-1
100-( (120/861)*100 )
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
library(tinytex)
###### Comparaison des données Météo MF et DSK smartick_meteo_v5
# Définition du répertoire de travail. NB: Il n'y null besoin de préciser le chemin absolu.
# "./" signifie répertoire courant, soit pycitique/R/citik_humains
getwd()
setwd("./")
## Pour la fonction qqPlot()
require(car)
# Import de la donnée comparative météo-France (MF) et darksky (DSK)
# La donnée MF est issue de 42 stations synoptiques réparties sur le territoire nationale
dskdatavg<- read.csv("../../data/donnee_meteo_nationale_comparative/darksky/darksky_moyennes_journalieres_maille_42.csv",
header = TRUE, sep = ",", dec = ".")
mfdatavg <- read.csv("../../data/donnee_meteo_nationale_comparative/meteoFrance/mf_moyennes_journalieres_maille_42.csv",
header = TRUE, sep = ",", dec = ".")
## vérification des jeux de donnée
ls(dskdatavg)
ls(mfdatavg)
##sommaire de la donnée et analyse primaire
summary(dskdatavg)
summary(mfdatavg)
### Création du template pour la fonction de génération de l'histogramme
weatherHistogram <- function(paramDSK, paramMF, Breaks, paramName, SIunit){
### Préparation des intervals
rangeDsk <- range(paramDSK, na.rm = TRUE)
rangeMf <- range(paramMF, na.rm = TRUE)
rangeAll <- c(rangeDsk,rangeMf)
minBreak <- min(rangeAll)
maxBreak <- max(rangeAll)
#### définition des intervalles
Brx <- seq(from= minBreak-10, to= maxBreak+10, by=Breaks) ## tient compte des deux distributions
HHdens <- hist(paramDSK, breaks = Brx, plot = F)
HHylimax <- max(HHdens$density)
HHylimin <- min(HHdens$density)
### freq=F => des fréquences relatives et pas des effectifs
hist(paramDSK, breaks=Brx,
freq=F, # fréquences
col="grey",
main = paste("Moyenne de ",paramName,SIunit," \n entre 1/1/2017 et 5/4/2020 soit 1191 jours"),
ylab = "densités",
xlab = paste("Moyenne de ",paramName,SIunit),
ylim = c(HHylimin+(HHylimin*25),HHylimax+(HHylimax*.25)),
cex.main = 1.3,
cex.lab = 1.5,
cex.axis = 1.5
)
### calcul des paramètres pour la fonction lines() à superposer à l'histo
HHx <- hist(paramMF, breaks = Brx,  plot=F)
lines(HHx$mids, HHx$density, lwd = 2, col = "green") ### courbe non lissée
lines(density(paramMF, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
}
### Création du template pour la fonction des tests statistiques
weatherStats <- function(paramDSK, paramMF, paramName, SIunit){
######### Test des distributions statistiques
cat("\n####### Test de normalité ",paramName," ",SIunit,"#######\n")
qqPlot(paramDSK, ylab = paramName)
qqPlot(paramMF, ylab = paramName)
cat("\n Fait: voir les grahiques dans la case des Plots de Rstudio \n")
cat("\n####### Shapiro test #######\n")
print( shapiro.test(paramDSK) )
print( shapiro.test(paramMF) )
cat("\n#######  t.test entre les différentes DSK et MF ",paramName," ",SIunit,"#######\n")
print(t.test(paramDSK, paramMF))
cat("\n####### fabrication des données pour le test KW ",paramName," ",SIunit,"#######\n")
dskdf <- data.frame(param=paramDSK, type='dsk')
mfdf <- data.frame(param=paramMF, type='mf')
kwdata <- rbind(dskdf,mfdf)
cat("Objet de donnée pour KW Fabriqué:\n")
cat("Sommaire de la donnée:\n")
print( summary(kwdata) )
cat("\n####### Kruskal-Wallis test ",paramName," ",SIunit,"#######\n")
## ~ signifie : "en fonction de"
print( kruskal.test(param ~ type, data = kwdata) )
cat("\n####### Test de wilcoxon ",paramName," ",SIunit,"#######\n")
print( wilcox.test(param ~ type, data = kwdata) )
}
####### boucle de calcul itératif
### Définition des listes des paramètres
templist <- list(dskParam=dskdatavg$temperature, mfParam=mfdatavg$temperature, Breaks=1, paramName='Température', SIunit='C°')
humlist <- list(dskParam=dskdatavg$humidity, mfParam=trunc(mfdatavg$humidite), Breaks=1, paramName='Humidité', SIunit='%')
ptrlist <- list(dskParam=dskdatavg$dewpoint, mfParam=mfdatavg$point_rose, Breaks=1, paramName='Point de rosée', SIunit='C°')
presslist <- list(dskParam=dskdatavg$pressure, mfParam=mfdatavg$press_mer, Breaks=1, paramName='Pression', SIunit='hPa')
vvlist <- list(dskParam=dskdatavg$windspeed, mfParam=mfdatavg$vvent, Breaks=0.5, paramName='Vitesse du vent', SIunit='m/s')
visiblist <- list(dskParam=dskdatavg$visibility, mfParam=mfdatavg$visibilite, Breaks=1, paramName='Visibilité', SIunit='%')
neblist <-list(dskParam=dskdatavg$cloudcover, mfParam=trunc(mfdatavg$nebulosite), Breaks=2, paramName='Nébulosité', SIunit='%')
raflist <- list(dskParam=dskdatavg$windgust, mfParam=mfdatavg$rafale_10min, Breaks=0.5, paramName='rafale de vent sur 10 min', SIunit='m/s')
preciplist01 <- list(dskParam=dskdatavg$precipintensity, mfParam=mfdatavg$precip_01h, Breaks=0.1, paramName='Intensité de précipitation 1h', SIunit='%')
preciplist24 <- list(dskParam=dskdatavg$precipintensitymax, mfParam=mfdatavg$precip_24h, Breaks=0.1, paramName='Intensité de précipitation 24h', SIunit='%')
paramlist <- list(templist, humlist, ptrlist, presslist, vvlist, visiblist, neblist, raflist, preciplist01, preciplist24)
length(paramlist)
for( param in paramlist) {
print(param$paramName)
### Histogramme du paramètres moyennes
weatherHistogram(param$dskParam, param$mfParam, param$Breaks, param$paramName, param$SIunit)
### Test des distributions statistiques
weatherStats(param$dskParam, param$mfParam, param$paramName, param$SIunit)
}
detach("package:tinytex", unload = TRUE)
install.packages("kableExtra")
View(dskdatavg)
View(mfdatavg)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
# Import de la donnée comparative météo-France (MF) et darksky (DSK)
# La donnée MF est issue de 42 stations synoptiques réparties sur le territoire nationale
dskdatavg<- read.csv("../../data/donnee_meteo_nationale_comparative/darksky/darksky_moyennes_journalieres_maille_42.csv",
header = TRUE, sep = ",", dec = ".")
mfdatavg <- read.csv("../../data/donnee_meteo_nationale_comparative/meteoFrance/mf_moyennes_journalieres_maille_42.csv",
header = TRUE, sep = ",", dec = ".")
View(dskdatavg)
View(mfdatavg)
mfdatavg <- read.csv("../../data/donnee_meteo_nationale_comparative/meteoFrance/mf_moyennes_journalieres_maille_42.csv",
header = TRUE, sep = ",", dec = ".")
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
knit_with_parameters('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.Rmd')
library(tinytex)
library(tinytex)
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
length(paramlist)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
search()
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
View(mfdatavg)
View(dskdatavg)
View(mfdatavg)
View(DSKdata)
View(MFdata)
### Or, if .csv file, use this si données séparées par ";"
DSKdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/dsk_moyennes_journalieres_maille_42.csv", header = TRUE, sep = ";", dec = ".")
MFdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/mf_moyennes_journalieres_maille_42.csv", header = TRUE, sep = ";", dec = ".")
View(DSKdata)
View(MFdata)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
humdatatot <- read.csv("../../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", sep = ",", dec = ".", quote = "'", stringsAsFactors = FALSE)
humdatatot <- read.csv("../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", sep = ",", dec = ".", quote = "'", stringsAsFactors = FALSE)
getwd()
humdatatot <- read.csv("../../pycitique/data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", sep = ",", dec = ".", quote = "'", stringsAsFactors = FALSE)
humdatatot <- read.csv("../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", sep = ",", dec = ".", quote = "'", stringsAsFactors = FALSE)
anidatatot <- read.csv("../../data/donnee_signalements_avec_meteo_dsk/citik_animaux_clean_weather_strict.csv", sep = ",", dec = ".", quote = "'", stringsAsFactors = FALSE)
table(anidatatot$qui_pique) ## pour connaître l'effectif
# install.packages(c("lubridate", "magrittr")) ##♥ https://fr.wikibooks.org/wiki/Programmer_en_R/Manipuler_les_dates_et_les_heures
library("lubridate")
library("magrittr")
time_length(interval(start = ymd("2017-07-15"), end = today()), unit = "days")
###♦ Ecart entre le 2017-07-15 (début officiel de signalement tiques)  et le "2020-04-05" (le max dans la base humadata)
time_length(interval(start = ymd("2017-07-15"), end = ymd("2020-04-05")), unit = "days")
humdatatot$datenum <- time_length(interval(start = ymd(humdatatot$date_piqure_saisie), end =  today()), unit = "days")  ## à l'envers
humdatatot <- read.csv("../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv", sep = ",", dec = ".", quote = "'", stringsAsFactors = FALSE)
anidatatot <- read.csv("../../data/donnee_signalements_avec_meteo_dsk/citik_animaux_clean_weather_strict.csv", sep = ",", dec = ".", quote = "'", stringsAsFactors = FALSE)
table(anidatatot$qui_pique) ## pour connaître l'effectif
# install.packages(c("lubridate", "magrittr")) ##♥ https://fr.wikibooks.org/wiki/Programmer_en_R/Manipuler_les_dates_et_les_heures
library("lubridate")
library("magrittr")
time_length(interval(start = ymd("2017-07-15"), end = today()), unit = "days")
###♦ Ecart entre le 2017-07-15 (début officiel de signalement tiques)  et le "2020-04-05" (le max dans la base humadata)
time_length(interval(start = ymd("2017-07-15"), end = ymd("2020-04-05")), unit = "days")
humdatatot$datenum <- time_length(interval(start = ymd(humdatatot$date_piqure_saisie), end =  today()), unit = "days")  ## à l'envers
# humdatatot$datenum=time_length(interval(start = today(), end = ymd(humdatatot$date_piqure_saisie)), unit = "days") ## à l'endroit
range(humdatatot$datenum, na.rm = TRUE)
## création d'un champ date "datepiq_YMD" où "humdatatot$date_piqure_saisie" de char devient date
humdatatot$datepiq_YMD <- ymd(humdatatot$date_piqure_saisie)
humdatatot$nbr <- 1  ##
humdata  <- subset(humdatatot, humdatatot$datepiq_YMD > "2017-07-14") ## seulement pour les signalements >= 15/07/2020
range(humdata$datenum, na.rm = TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/smartick_anim_hum_signal_v9ter.R', echo=TRUE)
## 1.1 XPS13
#setwd("C:/3VG/MSH/lyme/Smartick17/pycitique_miror/R")
getwd()
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/smartick_anim_hum_signal_v9ter.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/smartick_anim_hum_signal_v9ter.R', echo=TRUE)
library(ggplot2)
