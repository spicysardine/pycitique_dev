getwd()
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/smartick_anim_hum_signal_v9ter.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/smartick_anim_hum_signal_v9ter.R', echo=TRUE)
library(ggplot2)
## install.packages(c("lubridate", "magrittr"))
library("lubridate")
library("magrittr")
library("FactoMineR")
library("dplyr")
library("dplyr")
library("ggplot2")
library("scales")
## 2.1 Toutes durées confondues
humdatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
anidatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_animaux_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
### Ecart entre le 2017-07-15 (début officiel de signalement tiques)  et le "2020-04-05" (le max dans la base humadata)
time_length( interval(start = ymd("2017-07-15"), end = today() ), unit = "days")
### Ecart entre le 2017-07-15 et aujourd'hui
time_length(interval(start = ymd("2017-07-15"), end = ymd("2020-04-05")), unit = "days")
## création d'un champ datenum = date en nombre de jours avec la fonction date_length.
humdatatot$datenum <- time_length(interval(start = ymd(humdatatot$date_piqure_saisie), end =  today()), unit = "days")  ## à l'envers
humdatatot$date_piqure_saisie <- as.data.frame.Date(humdatatot$date_piqure_saisie)
typeof(humdatatot$date_piqure_saisie)
humdatatot$date_piqure_saisie <- as.Date(humdatatot$date_piqure_saisie)
## 2.1 Toutes durées confondues
humdatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
humdatatot$date_piqure_saisie <- as.Date(humdatatot$date_piqure_saisie)
typeof(humdatatot$date_piqure_saisie)
View(humdatatot)
range(humdatatot$datenum, na.rm = TRUE)
## création d'un champ datenum = date en nombre de jours avec la fonction date_length.
humdatatot$datenum <- time_length(interval(start = ymd(humdatatot$date_piqure_saisie), end =  today()), unit = "days")  ## à l'envers
range(humdatatot$datenum, na.rm = TRUE)
### Ecart entre le 2017-07-15 et aujourd'hui
time_length(interval(start = ymd("2017-07-15"), end = ymd("2020-04-05")), unit = "days")
### Ecart entre le 2017-07-15 (début officiel de signalement tiques)  et le "2020-04-05" (le max dans la base humadata)
time_length( interval(start = ymd("2017-07-15"), end = today() ), unit = "days")
### Ecart entre le 2017-07-15 (début officiel de signalement tiques)  et le "2020-04-05" (le max dans la base humadata)
time_length( interval(start = ymd("2017-07-15"), end = today() ), unit = "days")
range(humdata$datenum, na.rm = TRUE)
typeof(humdatatot$date_piqure_saisie)
humdatatot[humdatatot$date_piqure_saisie > "2017-07-14"]
humdatatot[humdatatot$date_piqure_saisie > '2017-07-14']
humdatatot[humdatatot$lon > 1]
humdatatot[humdatatot$lon > 1,]
humdatatot[,humdatatot$lon > 1]
humdatatot[humdatatot$lon > 1, 'lon']
humdatatot[humdatatot$lon > 7, 'lon']
humdatatot[humdatatot$lon > 9, 'lon']
humdatatot[humdatatot$lon > 9, -'lon']
humdatatot[humdatatot$lon > 9, -3]
humdatatot[humdatatot$lon > 9, 3]
humdatatot[humdatatot$lon > 9, 1]
humdatatot[humdatatot$lon > 9, 'lon']
humdatatot[humdatatot$date_piqure_saisie > "2017-07-14"]
humdatatot[humdatatot$date_piqure_saisie > "2017-07-14",]
humdatatot[humdatatot$date_piqure_saisie > "2017-07-14", 'date_piqure_saisie']
## seulement pour les signalements >= 15/07/2020
humdata  <- subset(humdatatot, humdatatot$datepiq_YMD >= "2017-07-15")
humdatatot[humdatatot$date_piqure_saisie > "2017-07-14", 'date_piqure_saisie']
humdatatot[humdatatot$date_piqure_saisie >= "2017-07-14", 'date_piqure_saisie']
sort(humdatatot[humdatatot$date_piqure_saisie >= "2017-07-14", 'date_piqure_saisie'])
View(humdata)
dates_brutes =c("21/04/2017 09:30","25/04/2017 08:15","25/04/2017 19:30","03/05/2017 17:00","17/06/2017 18:00","30/06/2017 18:00")
?strptime
type(dates_brutes)
typeof(dates_brutes)
dates = strptime(dates_brutes, "%d/%m/%Y %R")  # Pour accéder à d'autres formats de temps : cliquer ici.
typeof(dates)
View(dates)
y = c(1,2,10,8,7,6) # données d'ordonnées
# Conversion des données exprimant les limites de l'axe des x qui ira dans l'exemple d'avril à juillet.
limitations = c( as.POSIXct( strptime("01/04/2017","%d/%m/%Y" ) ), as.POSIXct( strptime("01/07/2017","%d/%m/%Y") ) )
plot(dates,
y,
axes=F,
pch=16,
type="o",
xlim=limitations,
cex=3,
col="orange",
ylab="Taille (cm)",
xlab="Temps (mois)")
# Abscisses exprimant dans ses graduations uniquement le noms des mois
# force indiquant la date de chaque jour
axis.POSIXct(1, at=seq(from=strptime("01/03/2017","%d/%m/%Y" ), to=strptime("25/08/2017","%d/%m/%Y" ), by="month"), format="%b", las=2)
# Ordonnées
axis(2,c(0:10))
temps_duree = as.numeric(
difftime( strptime( dates_brutes[length(dates_brutes)], "%d/%m/%Y %R" ),
strptime( dates_brutes[1], "%d/%m/%Y %R"), units="mins" )
)/60/24
cat("La différence de temps sur l'expérience est de :", round(temps_duree,0), " jours.")
text(as.POSIXct(strptime("01/06/2017","%d/%m/%Y" ) ), 9, paste("Expérience sur : ",round(temps_duree,0)," jours."))
## 2.1 Toutes durées confondues
humdatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_humains_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
anidatatot <- read.csv(
"../../data/donnee_signalements_avec_meteo_dsk/citik_animaux_clean_weather_strict.csv",
sep = ",",
dec = ".",
quote = "'",
stringsAsFactors = FALSE)
## pour connaître l'effectif
table(anidatatot$qui_pique)
### Ecart entre le 2017-07-15 (début officiel de signalement tiques)  et le "2020-04-05" (le max dans la base humadata)
time_length( interval(start = ymd("2017-07-15"), end = today() ), unit = "days")
### Ecart entre le 2017-07-15 et aujourd'hui
time_length(interval(start = ymd("2017-07-15"), end = ymd("2020-04-05")), unit = "days")
### Ecart entre le 2017-07-15 (début officiel de signalement tiques)  et le "2020-04-05" (le max dans la base humadata)
time_length(interval(start = ymd("2017-07-15"), end = ymd("2020-04-05")), unit = "days")
### Ecart entre le 2017-07-15 et aujourd'hui
time_length( interval(start = ymd("2017-07-15"), end = today() ), unit = "days")
interval( start = ymd(humdatatot$date_piqure_saisie), end=today() ), unit="days"
## création d'un champ datenum = date en nombre de jours avec la fonction date_length.
humdatatot$datenum <- time_length( interval( start = ymd(humdatatot$date_piqure_saisie), end=today() ), unit="days" )
interval( start = ymd(humdatatot$date_piqure_saisie), end=today() )
ymd(humdatatot$date_piqure_saisie)
## création d'un champ datenum = date en nombre de jours avec la fonction date_length.
humdatatot$datenum <- time_length( interval( start = humdatatot$date_piqure_saisie, end=today() ), unit="days" )
interval( start = humdatatot$date_piqure_saisie, end=today() )
y
## création d'un champ datenum = date en nombre de jours avec la fonction date_length.
humdatatot$datenum <- time_length( interval( start = ymd(humdatatot$date_piqure_saisie), end=today() ), unit="days" )
range(humdatatot$datenum, na.rm = TRUE)
## création d'un champ nbr = effectif par jour (numérique remlie de 1)
humdatatot$nbr <- 0  ##
range(humdata$datenum, na.rm = TRUE)
## création d'un champ nbr = effectif par jour (numérique remlie de 1)
humdatatot$nbr <- 0  ##
## seulement pour les signalements >= 15/07/2020
humdata  <- subset(humdatatot, humdatatot$datepiq_YMD > "2017-07-14")
View(humdata)
## création d'un champ date "datepiq_YMD" où "anidatatot$date_piqure_saisie" de char devient date
anidatatot$datepiq_YMD <- ymd(anidatatot$date_piqure_saisie)
## création d'un champ nbr = effectif par jour (numérique remlie de 1)
humdatatot$nbr <- 0  ##
## seulement pour les signalements >= 15/07/2020
humdata  <- subset(humdatatot, humdatatot$datepiq_YMD > "2017-07-14")
View(humdata)
## création d'un champ nbr = effectif par jour (numérique remlie de 1)
humdatatot$nbr <- 0  ##
subset(humdatatot, humdatatot$datepiq_YMD > "2017-07-14")
## création d'un champ nbr = effectif par jour (numérique remlie de 1)
humdatatot$nbr <- 0  ##
## création d'un champ date "datepiq_YMD" où "humdatatot$date_piqure_saisie" de char devient date
humdatatot$datepiq_YMD <- ymd(humdatatot$date_piqure_saisie)
## création d'un champ nbr = effectif par jour (numérique remlie de 1)
humdatatot$nbr <- 0  ##
## seulement pour les signalements >= 15/07/2020
humdata  <- subset(humdatatot, humdatatot$datepiq_YMD > "2017-07-14")
View(humdata)
range(humdata$datenum, na.rm = TRUE)
anidatatot$datenum <- time_length(interval(start = ymd(anidatatot$date_piqure_saisie), end = today()), unit = "days")
## création d'un champ date "datepiq_YMD" où "anidatatot$date_piqure_saisie" de char devient date
anidatatot$datepiq_YMD <- ymd(anidatatot$date_piqure_saisie)
anidata  <- subset(anidatatot, anidatatot$datepiq_YMD > "2017-07-14") ## seulement pour les signalements >= 15/07/2020
range(anidata$datenum, na.rm = TRUE)
range(anidata$datenum, na.rm = TRUE)
anidatachat <- subset(anidata, anidata$qui_pique == "Chat")
anidatachien <- subset(anidata, anidata$qui_pique == "Chien")
humdataAL <- subset(humdata, humdata$departement_code == "08" | humdata$departement_code == "10" | humdata$departement_code == "51" | humdata$departement_code == "52" | humdata$departement_code == "54" |  humdata$departement_code == "55" |  humdata$departement_code == "57" |  humdata$departement_code == "67" | humdata$departement_code == "68" | humdata$departement_code == "88")
anidataAL <- subset(anidata, anidata$departement_code == "08" | anidata$departement_code == "10" | anidata$departement_code == "51" | anidata$departement_code == "52" | anidata$departement_code == "54" |  anidata$departement_code == "55" |  anidata$departement_code == "57" |  anidata$departement_code == "67" | anidata$departement_code == "68" | anidata$departement_code == "88")
View(anidataAL)
### Création des subset pour l'AL
humdataAL <- subset(humdata, humdata$departement_code == c("08","10","51","52","54","55","57","67","68","88"))
### Création des subset pour l'AL
humdataAL <- humdata[humdata$departement_code == c("08","10","51","52","54","55","57","67","68","88"), ]
### Création des subset pour l'AL
humdataAL <- humdata[humdata$departement_code == "08", ]
View(humdataAL)
### Création des subset pour l'AL
humdataAL <- humdata[humdata$departement_code == "08"|"10"|"51"|"52"|"54"|"55"|"57"|"67"|"68"|"88", ]
### Création des subset pour l'AL
humdataAL <- humdata[humdata$departement_code == c("08","10","51","52","54","55","57","67","68","88"), ]
### Création des subset pour l'AL
humdataAL <- humdata[humdata$departement_code == c("08","10","51","52","54"), ]
### Création des subset pour l'AL
humdataAL <- humdata[humdata$departement_code == c("08","10","51","52","54","55","57","67","68","88"), ]
humdata[humdata$departement_code == c("08","10","51","52","54","55","57","67","68","88"), ]
### Création des subset pour l'AL
humdataAL <- humdata[humdata$departement_code == c("08","10","51","52","54","55","57","67","68","88"), ]
View(anidataAL)
View(humdataAL)
anidataAL <- anidata[humdata$departement_code == c("08","10","51","52","54","55","57","67","68","88"), ]
View(anidataAL)
anidataAL <- subset(anidata, anidata$departement_code == "08" | anidata$departement_code == "10" | anidata$departement_code == "51" | anidata$departement_code == "52" | anidata$departement_code == "54" |  anidata$departement_code == "55" |  anidata$departement_code == "57" |  anidata$departement_code == "67" | anidata$departement_code == "68" | anidata$departement_code == "88")
### Création des subset pour l'IDF
humdataIDF <- subset(humdata, humdata$departement_code == "75" |  humdata$departement_code == "77" |  humdata$departement_code == "78" |  humdata$departement_code == "91" |  humdata$departement_code == "92" | humdata$departement_code == "93" |  humdata$departement_code == "94" | humdata$departement_code == "95")
# DSKdataIDF <- subset(DSKdata, DSKdata$departement_code == "75" |  DSKdata$departement_code == "77" |  DSKdata$departement_code == "78" |  DSKdata$departement_code == "91" |  DSKdata$departement_code == "92" | DSKdata$departement_code == "93" |  DSKdata$departement_code == "94" | DSKdata$departement_code == "95")
anidataIDF <- subset(anidata, anidata$departement_code == "75" |  anidata$departement_code == "77" |  anidata$departement_code == "78" |  anidata$departement_code == "91" |  anidata$departement_code == "92" | anidata$departement_code == "93" |  anidata$departement_code == "94" | anidata$departement_code == "95")
ls(humdata) ## liste les variables
# ls(DSKdata)
ls(anidata)
str(humdata) ##  a diagnostic function and an alternative to summary
# str(DSKdata)
str(anidata)
summary(humdata)
# summary(DSKdata)
summary(anidata)
###§ 3.1.1 Humains
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
humdata_dates <- strptime(humdata$date_piqure_saisie, "%Y-%m-%d")  # Pour accéder à d'autres formats de temps : https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/strptime.
View(humdata_dates)
Sys.setlocale("LC_TIME", lct)
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
anidatachien_dates = strptime(anidatachien$date_piqure_saisie, "%Y-%m-%d")  # Pour accéder à d'autres formats de temps : https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/strptime.
Sys.setlocale("LC_TIME", lct)
# anidatachien_dates
wdata = data.frame(humdata)
mu <- wdata %>%
group_by(datepiq_YMD) %>%
summarise(grp.sum = sum(nbr))
View(mu)
p <- ggplot(mu, aes(x=datepiq_YMD)) +
geom_line(aes(y = grp.sum), color = "darkred")
# Format : Semaine
p + scale_x_date(date_labels = "%U")
# Format : mois/année
p + scale_x_date(date_labels = "%b/%y")
# Définir les limites de l'axe c(min, max)
min <- as.Date("2017-07-15")
max <- NA
p + scale_x_date(limits = c(min, max), date_labels = "%b/%y")
p + scale_x_continuous(breaks = seq(min, max, by = "%b/%y"))
ggplot(humdata, aes(x=datepiq_YMD)) +
geom_line(aes(y = nbr), color = "darkred") +
geom_line(aes(y = nbr_tique), color="steelblue", linetype="twodash")
par(las = 2) ## 2 = always perpendicular to the axis,
barplot(table(humdata$datepiq_YMD))
dotchart(as.numeric(table(humdata$datepiq_YMD)))
hist(humdata$datepiq_YMD, breaks = "days")
compt <- as.data.frame(table(humdata$datepiq_YMD))
View(compt)
compt[,1] <- as.Date(compt[,1])
plot(x=compt[,1], y=compt[,2], type = "b", pch = 19, las = 1, xlab = "Temps", ylab = "Effectif",
ylim = c(0, max(y)))
plot(x=compt$Var1, y=compt$Freq, type = "b", pch = 19, las = 1, xlab = "Temps", ylab = "Effectif",
ylim = c(0, max(y)))
plot(x=compt$Var1, y=compt$Freq,
type = "b",
pch = 19,
las = 1,
xlab = "Temps",
ylab = "Effectif",
ylim = c( 0, max(y) )
)
humDate <- ymd(humdata$date_piqure_saisie)
humDate
class(humDate)
df <- data.frame(
date = humDate)
head(df)
## sauf que ici pas de frequency calculé = message d'erreur
p <- ggplot(data = df, aes(x = date, y = frequency)) +
geom_line(color = "steelblue")
p  + scale_x_date(date_labels = "%B / %Y")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
wdatahum <- data.frame(
sexpique = humdata$sex_pique,
nbtique = humdata$nbr_tique,
x = 1)
head(wdatahum, 4)
mu <- wdatahum %>%
group_by(sexpique) %>%
summarise(grp.mean = mean(nbtique))
mu
theme_set(
theme_classic() +
theme(legend.position = "top")
)
a <- ggplot(wdatahum, aes(x = nbtique))
# Basic density plots
a + geom_histogram(bins = 30, color = "black", fill = "gray") +
geom_vline(aes(xintercept = mean(nbtique)),
linetype = "dashed", size = 0.6)
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
## The "same" with automatic column names:
data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
freqs <- aggregate(humDate, by=list(humDate), FUN=length) # calcul la freq de humdate en prenant la liste de ts les humdate en fct de leur longueur (!)
freqs$names <- as.Date(freqs$Group.1, format="%Y-%m-%d")
head(freqs$names)
head(freqs$Group.1)
p <- ggplot(freqs, aes(x=names, y=x)) + geom_line() +
scale_x_date(breaks="2 month", labels = date_format("%Y-%m"), # %m en chiffres, %b en lettres (français) abrégées, %B en lettres (français) in extenso
limits=c(as.Date("2017-07-15"),as.Date("2020-04-05"))) +
ylab("Frequency") + xlab("Year and Month") +
theme_bw()
p
p + theme(axis.text.x = element_text(angle=90)) ## https://www.datanovia.com/en/fr/blog/ggplot-graduations-des-axes-definir-et-pivoter-les-textes/
# Définir les limites de l'axe c(min, max) mais on perd les mois !
min <- as.Date("2017-07-15")
max <- NA
p + theme(axis.text.x = element_text(angle=90)) + scale_x_date(limits = c(min, max)) # ce "scale_x_date" annule le précédent
p + theme(axis.text.x = element_blank(), axis.ticks = element_blank()) # élimine les dates de l'axe des x !
#### vérifié que le nombre d'obs n'est pas égal entre les tableaux
length(humdata_dates)
#### vérifié que le nombre d'obs n'est pas égal entre les tableaux
length(humdata_dates)
# [1] 12864
length(na.omit(humdata_dates)) ## pour tester si NA
length(anidata$datenum)
# [1] 4668
length(na.omit(anidata$datenum)) ## pour tester si NA
##### et que l'étendue n'est pas la même
range(humdata$datenum, na.rm = TRUE)
range(DSKdata$date_releve, na.rm = TRUE)
range(anidata$datenum, na.rm = TRUE)
range(anidatachat$datenum, na.rm = TRUE)
range(anidatachien$datenum, na.rm = TRUE)
nrhum <- nrow(humdata_dates)
nrdsk <- nrow(DSKdata)
nrani <- nrow(anidata)
nranichat <- nrow(anidatachat)
nranichien <- nrow(anidatachien)
##### et que l'étendue n'est pas la même
range(humdata$datepiq_YMD, na.rm = TRUE)
range(anidata$datepiq_YMD, na.rm = TRUE)
range(anidatachat$datepiq_YMD, na.rm = TRUE)
range(anidatachien$datepiq_YMD, na.rm = TRUE)
### on calcule le nb de lignes des tableaux (pour l'habillage des histogrammes)
nrhum <- nrow(humdata)
nrani <- nrow(anidata)
nranichat <- nrow(anidatachat)
nranichien <- nrow(anidatachien)
#### on définit les breaks pour l'abscisse commune qui tient compte des deux distributions
BRt <- seq(from= 2017-08-10, to= 2020-04-05, by=1) ## à l'envers
hist(humdata$datepiq_YMD,
"week", # break
axes=F,
freq=T, # fréquences si True, densité si False
col="grey",
main = "Distribution of ticks' reporting \n (France, july 2017 - april 2020), 995 days",
ylab = "Frequency",
xlab = "Dates of reporting"
)
axis.POSIXct(2,
at=seq(from=strptime("2017-08-10","%Y-%m-%d" ),
to=strptime("2020-04-05","%Y-%m-%d"),
by="years"), format="%Y", las=2) # force indiquant la date de chaque jour
axis(2,c(0:600))
HH2 <- hist(anidata$datepiq_YMD, "week",  plot=F)
#lines(HH2$mids, HH2$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(humdata$datepiq_YMD, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(-750, 0.003, paste("Human"), cex = 1.2,  col = "black")
text(-700, 0.002, paste("Animals"), cex = 1.2,  col = "blue")
wilcox.test(humdata$datenum , anidata$datenum) ## comparaison des médianes avec p-value = 7.532e-08 donc différences significatives
class(humdatatot$date_piqure_saisie)
class(humdatatot$datepiq_YMD)
conversion du chmap "humdatatot$date_piqure_saisie" de char à date
##  conversion du chmap "humdatatot$date_piqure_saisie" de char à date
humdatatot$date_piqure_saisie <- as.Date(humdatatot$date_piqure_saisie)
class(humdatatot$date_piqure_saisie)
typeof(humdatatot$date_piqure_saisie)
length(paramlist)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
length(paramlist)
as.data.frame(paramlist)
View(ptrlist)
View(paramlist)
View(paramlist)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_analyse_moyenne_kh.R', echo=TRUE)
qplot(foo,bar,geom="blank") + geom_point() + geom_line()
y=c(-1.49,3.37,2.59,-2.78,-3.94,-0.92,6.43,8.51,3.41,-8.23,
-12.01,-6.58,2.87,14.12,9.63,-4.58,-14.78,-11.67,1.17,15.62)
x=1:20
qplot(foo,bar,geom="blank") + geom_point() + geom_line()
foo <- c(1.1,2,3.5,3.9,4.2)
bar <- c(2,2.2,-1.3,0,0.2)
y=c(-1.49,3.37,2.59,-2.78,-3.94,-0.92,6.43,8.51,3.41,-8.23,-12.01,-6.58,2.87,14.12,9.63,-4.58,-14.78,-11.67,1.17,15.62)
x=1:20
qplot(foo,bar,geom="blank") + geom_point() + geom_line()
qplot(foo,bar,geom="blank") + geom_point(size=3,shape=6,color="blue")
qplot(foo,bar,geom="blank") + geom_point(size=3,shape=6,color="blue") + geom_line(color="red",linetype=2)
+ geom_line(color="red",lty=2)
qplot(foo,bar,geom="blank")
qplot(foo,bar,geom="blank") + geom_point() + geom_line()
qplot(foo,bar,geom="blank")
i
qplot(foo,bar,geom="blank") + geom_point() + geom_line()
qplot(foo,bar,geom="blank")
qplot(foo,bar,geom="blank")
qplot(foo,bar,geom="blank") + geom_point(size=3,shape=6,color="blue") + geom_line(color="red",linetype=2)
qplot(foo,bar,geom="blank")
qplot(foo,bar,geom="blank") +
geom_point(size=3,shape=6,color="blue") +
geom_line(color="red",linetype=2)
qplot(foo,bar,geom="blank") +
geom_point(size=3,shape=6,color="blue") +
geom_line(color="red",linetype=2)
myqplot <- qplot(foo,bar,geom="blank") + geom_point(size=3,shape=6,color="blue") + geom_line(color="red",linetype=2)
class(myqplot)
typeof(myqplot)
myqplot+ geom_line(color="green")
myqplot+ geom_line(color="green", linetype=1)
myqplot <- qplot(foo,bar,geom="blank") + geom_point(size=3,shape=6,color="blue") + geom_line(color="red",linetype=2)
myqplot+ geom_line(color="green", linetype=1)
myqplot+geom_point(size=6)
myqplot+geom_point(size=6, shape=6)
myqplot+geom_point(size=6, shape=6, color="green")
qplot(foo,bar,geom="blank")
myqplot <- qplot(foo,bar,geom="blank")
myqplot
myqplot+ geom_line(color="green", linetype=1)
myqplot+geom_point(size=6, shape=6, color="green")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=6, shape=6, color="green")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=6, shape=1, color="blue")
myqplot <- qplot(foo,bar,geom="blank")
myqplot
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=6, shape=1, color="blue")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=6, shape=3, color="blue")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=6, shape=2, color="blue")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=2, shape=3, color="blue")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=1, shape=3, color="blue")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=1, shape=1, color="blue")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=1, shape=1, color="blue")
??"geom_"
rep(NA, length(x))
ptype <- rep(NA, length(x))
ptype
foo <- c(1.1,2,3.5,3.9,4.2)
bar <- c(2,2.2,-1.3,0,0.2)
y=c(-1.49,3.37,2.59,-2.78,-3.94,-0.92,6.43,8.51,3.41,-8.23,-12.01,-6.58,2.87,14.12,9.63,-4.58,-14.78,-11.67,1.17,15.62)
x=1:20
qplot(foo,bar,geom="blank") + geom_point() + geom_line()
qplot(foo,bar,geom="blank") +
geom_point(size=3,shape=6,color="blue") +
geom_line(color="red",linetype=2)
myqplot <- qplot(foo,bar,geom="blank") + geom_point(size=3,shape=6,color="blue") + geom_line(color="red",linetype=2)
class(myqplot)
typeof(myqplot)
myqplot <- qplot(foo,bar,geom="blank")
myqplot
myqplot+ geom_line(color="green", linetype=1)
myqplot+ geom_point(size=6, shape=6, color="green")
myqplot+ geom_line(color="green", linetype=1) + geom_point(size=1, shape=1, color="blue")
??"geom_"
ptype <- rep(NA, length(x))
ptype
ptype[y>=5] <- "too_big"
ptype
ptype[y<=-5] <- "too_small"
ptype
ptype[(x>=5&x<=15)&(y>-5&y<5)] <- "sweet"
ptype
ptype[(x<5|x>15)&(y>-5&y<5)] <- "standard"
ptype <- factor(x=ptype)
ptype
class(ptype)
rm(ptype)
ptype <- rep(NA, length(x))
class(ptype)
typeof(ptype)
ptype[y>=5] <- "too_big"
ptype[y>=5] <- "too_big"
ptype[y<=-5] <- "too_small"
ptype[(x>=5&x<=15)&(y>-5&y<5)] <- "sweet"
ptype[(x<5|x>15)&(y>-5&y<5)] <- "standard"
ptype
ptype <- factor(x=ptype)
ptype
qplot(x,y,color=ptype,shape=ptype)
library(ggplot2, lib.loc = "/usr/lib/R/site-library")
detach("package:ggplot2", unload = TRUE)
library(ggplot2, lib.loc = "/usr/lib/R/site-library")
qplot(x,y,color=ptype,shape=ptype)
qplot(x,y)
qplot(x,y,color=ptype,shape=ptype) + geom_point(size=4) +
geom_line(mapping=aes(group=1),color="black",lty=2)# +
qplot(x,y, color=ptype, shape=ptype) + geom_point(size=4) +
geom_line( color="black", lty=2)# +
qplot(x,y, color=ptype, shape=ptype) + geom_point(size=4) +
geom_line(mapping=aes(group=1), color="black", lty=2) +
geom_hline(mapping=aes(yintercept=c(-5,5)),color="red")# +
qplot(x,y, color=ptype, shape=ptype) + geom_point(size=4) +
geom_line(mapping=aes(group=1), color="black", lty=2) +
geom_hline(mapping=aes(yintercept=c(-5,5)), color="red") +
geom_segment(mapping=aes(x=5,y=-5,xend=5,yend=5),color="red",lty=3) +
geom_segment(mapping=aes(x=15,y=-5,xend=15,yend=5),color="red",lty=3)
source('~/Developer/R/ggplot2/ggplot2_training.R', echo=TRUE)
require(ggplot2)
source('~/Developer/R/ggplot2/ggplot2_training.R', echo=TRUE)
