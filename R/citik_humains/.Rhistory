cex.lab = 1.5,
cex.axis = 1.5
)
range(wdata$temperature, na.rm = 1)
range(mfdata$temperature , na.rm = 1 )
range(wdata$temperature, na.rm = 1)
# #################################################### comparatif Température moyenne ####################################################
length(wdata$temperature)
length(mfdata$temperature)
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_mf_pdf_pgsql.R')
# #################################################### comparatif Température moyenne ####################################################
length(wdata$temperature)
length(mfdata$temperature)
range(wdata$rature, na.rm = 1)
range(wdata$temperature, na.rm = 1)
range(mfdata$temperature , na.rm = 1 )
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_mf_pdf_pgsql.R')
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_mf_pdf_pgsql.R')
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_dsk_pdf_pgsql.R')
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_mf_pdf_pgsql.R')
source('~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/citik_humains_mf_pdf_pgsql.R')
install.packages("dplyr")
install.packages("vctrs")
install.packages("dplyr")
install.packages("glue")
install.packages("dplyr")
install.packages("lifecycle")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("tibble")
install.packages("tidyverse")
library(ggpubr)
detach("package:ggpubr", unload = TRUE)
install.packages("rstatix")
library(rstatix)
?rstatix
??rstatix
PlantGrowth %>% group_by(group)
hist(dskdatavg$temperature, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Moyenne des températures entre 1/1/2017 et 5/4/2020 sur 1191 jours",
ylab = "densités",
xlab = "Moyenne des temperatures (°C)"
)
### calcul des paramètres pour la fonction lines() à superposer à l'histo
HHt <- hist(mfdatavg$temperature, breaks = BRt,  plot=F)
lines(HHt$mids, HHt$density, lwd = 2, col = "green") ### courbe non lissée  ## SO
lines(density(mfdatavg$temperature, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
## labels
text(03, 0.07, paste("Darksky"), cex = 1.2,  col = "black")
text(02, 0.06, paste("Météo France"), cex = 1.2,  col = "blue")
dskdatavg<- read.csv("../../data/donnee_meteo_nationale_comparative/darksky/darksky_moyennes_journalieres_maille_42.csv", header = TRUE, sep = ",", dec = ".")
mfdatavg <- read.csv("../../data/donnee_meteo_nationale_comparative/meteoFrance/mf_moyennes_journalieres_maille_42.csv", header = TRUE, sep = ",", dec = ".")
## vérification des jeux de donnée
## liste les variables
ls(dskdatavg)
ls(mfdatavg)
############################## Analyse des Températures moyennes ########################################
qqplot(dskdata$temperature,mfdatavg$temperature, plot.it = TRUE)
### freq=F => des fréquences relatives et pas des effectifs
hist(dskdatavg$temperature, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Moyenne des températures entre 1/1/2017 et 5/4/2020 sur 1191 jours",
ylab = "densités",
xlab = "Moyenne des temperatures (°C)"
)
### calcul des paramètres pour la fonction lines() à superposer à l'histo
HHt <- hist(mfdatavg$temperature, breaks = BRt,  plot=F)
lines(HHt$mids, HHt$density, lwd = 2, col = "green") ### courbe non lissée  ## SO
lines(density(mfdatavg$temperature, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
## labels
text(03, 0.07, paste("Darksky"), cex = 1.2,  col = "black")
text(02, 0.06, paste("Météo France"), cex = 1.2,  col = "blue")
### freq=F => des fréquences relatives et pas des effectifs
hist(dskdatavg$temperature, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Moyenne des températures entre 1/1/2017 et 5/4/2020 sur 1191 jours",
ylab = "densités",
xlab = "Moyenne des temperatures (°C)"
)
### calcul des paramètres pour la fonction lines() à superposer à l'histo
HHt <- hist(mfdatavg$temperature, breaks = BRt,  plot=F)
lines(HHt$mids, HHt$density, lwd = 2, col = "green") ### courbe non lissée  ## SO
lines(density(mfdatavg$temperature, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
## labels
text(03, 0.07, paste("Darksky"), cex = 1.2,  col = "black")
text(02, 0.06, paste("Météo France"), cex = 1.2,  col = "blue")
BRt <- seq(from= -5, to= 30, by=2) ## tient compte des deux distributions
### freq=F => des fréquences relatives et pas des effectifs
hist(dskdatavg$temperature, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Moyenne des températures entre 1/1/2017 et 5/4/2020 sur 1191 jours",
ylab = "densités",
xlab = "Moyenne des temperatures (°C)"
)
### calcul des paramètres pour la fonction lines() à superposer à l'histo
HHt <- hist(mfdatavg$temperature, breaks = BRt,  plot=F)
lines(HHt$mids, HHt$density, lwd = 2, col = "green") ### courbe non lissée  ## SO
lines(density(mfdatavg$temperature, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
## labels
text(03, 0.07, paste("Darksky"), cex = 1.2,  col = "black")
text(02, 0.06, paste("Météo France"), cex = 1.2,  col = "blue")
BRh <- seq(from= 0, to= 100, by=2) ## tient compte des deux distributions
hist(dskdatavg$humidity, breaks = BRh,
freq=F,
col="grey",
main = "Mean Humidity for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean Humidity (%)"
)
HHh <- hist(mfdatavg$humidite, breaks = BRh,  plot=F)
lines(HHh$mids, HHh$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(mfdatavg$humidite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(60, 0.04, paste("Darksky"), cex = 1.2,  col = "black")
text(55, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(dskdata$humidity,mfdatavg$humidite.it = TRUE)
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(dskdata$humidity,mfdatavg$humidite.it = TRUE)
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(dskdata$humidity,mfdatavg$humidite it = TRUE)
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(dskdata$humidity,mfdatavg$humidite plot.it = TRUE)
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(dskdata$humidity,mfdatavg$humiditeplot.it = TRUE)
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(dskdata$humidity,mfdatavg$humidite, plot.it = TRUE)
### Import des données pour le test kruskal.test() sur données mfdatavg$humidite, dskdatavg$humidity in : KW_temp_maille_42.csv
kwhumdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_hum_maille_42.csv", header = TRUE, sep = ";", dec = ".")
summary(kwhumdata)
## Kruskal-Wallis chi-squared = 9.2389, df = 1, p-value = 0.002369 => p-value significative, les 2 échantillons sont significativement différents !
kruskal.test(temp ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
### Import des données pour le test kruskal.test() sur données mfdatavg$temperature, dskdatavg$temperature in : KW_temp_maille_42.csv
kwtempdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_temp_maille_42.csv", header = TRUE, sep = ";", dec = ".")
## Kruskal-Wallis chi-squared = 2.5559, df = 1, p-value = 0.1099 => p-value non significative, les 2 échantillons ne sont pas significativement différents !
kruskal.test(temp ~ type, data = kwtempdata) ## ~ signifie : "en fonction de"
library(ggpubr)
library(tidyverse)
kwhumdata %>% kruskal_effsize(temp ~ type)
save.image("~/Developer/python/CNRS/projetCitique/pycitique/R/citik_humains/Rciticks2020_humains.RData")
getOption('Ncpus', 1L)
install.packages("cartography")
install.packages(c("backports", "BH", "brio", "car", "carData", "cartogram", "caTools", "classInt", "clipr", "colorspace", "cowplot", "crosstalk", "data.table", "DBI", "deldir", "dendextend", "digest", "e1071", "ellipse", "FactoMineR", "fansi", "flexmix", "forcats", "foreach", "Formula", "fpc", "gdtools", "ggplot2", "ggpubr", "ggrepel", "gplots", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "isoband", "iterators", "knitr", "labeling", "labelled", "later", "leaflet", "leafpop", "lme4", "lwgeom", "magrittr", "maptools", "mclust", "modeltools", "mvtnorm", "nloptr", "openssl", "openxlsx", "osrm", "packcircles", "pbkrtest", "pillar", "plyr", "promises", "purrr", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "rprojroot", "rstudioapi", "scales", "sf", "shiny", "sp", "SpatialPosition", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "svglite", "sys", "systemfonts", "tidyr", "tinytex", "units", "uuid", "xfun", "xlsx"))
install.packages(c("backports", "BH", "brio", "car", "carData", "cartogram", "caTools", "classInt", "clipr", "colorspace", "cowplot", "crosstalk", "data.table", "DBI", "deldir", "dendextend", "digest", "e1071", "ellipse", "FactoMineR", "fansi", "flexmix", "forcats", "foreach", "Formula", "fpc", "gdtools", "ggplot2", "ggpubr", "ggrepel", "gplots", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "isoband", "iterators", "knitr", "labeling", "labelled", "later", "leaflet", "leafpop", "lme4", "lwgeom", "magrittr", "maptools", "mclust", "modeltools", "mvtnorm", "nloptr", "openssl", "openxlsx", "osrm", "packcircles", "pbkrtest", "pillar", "plyr", "promises", "purrr", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "rprojroot", "rstudioapi", "scales", "sf", "shiny", "sp", "SpatialPosition", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "svglite", "sys", "systemfonts", "tidyr", "tinytex", "units", "uuid", "xfun", "xlsx"))
install.packages(c("backports", "BH", "brio", "car", "carData", "cartogram", "caTools", "classInt", "clipr", "colorspace", "cowplot", "crosstalk", "data.table", "DBI", "deldir", "dendextend", "digest", "e1071", "ellipse", "FactoMineR", "fansi", "flexmix", "forcats", "foreach", "Formula", "fpc", "gdtools", "ggplot2", "ggpubr", "ggrepel", "gplots", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "isoband", "iterators", "knitr", "labeling", "labelled", "later", "leaflet", "leafpop", "lme4", "lwgeom", "magrittr", "maptools", "mclust", "modeltools", "mvtnorm", "nloptr", "openssl", "openxlsx", "osrm", "packcircles", "pbkrtest", "pillar", "plyr", "promises", "purrr", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "rprojroot", "rstudioapi", "scales", "sf", "shiny", "sp", "SpatialPosition", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "svglite", "sys", "systemfonts", "tidyr", "tinytex", "units", "uuid", "xfun", "xlsx"))
install.packages("cartogram")
install.packages(c("backports", "BH", "brio", "car", "carData", "caTools", "classInt", "clipr", "colorspace", "cowplot", "crosstalk", "data.table", "DBI", "deldir", "dendextend", "digest", "e1071", "ellipse", "FactoMineR", "fansi", "flexmix", "forcats", "foreach", "Formula", "fpc", "gdtools", "ggplot2", "ggpubr", "ggrepel", "gplots", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "isoband", "iterators", "knitr", "labeling", "labelled", "later", "leaflet", "leafpop", "lme4", "lwgeom", "magrittr", "maptools", "mclust", "modeltools", "mvtnorm", "nloptr", "openssl", "openxlsx", "osrm", "packcircles", "pbkrtest", "pillar", "plyr", "promises", "purrr", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "rprojroot", "rstudioapi", "scales", "sf", "shiny", "sp", "SpatialPosition", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "svglite", "sys", "systemfonts", "tidyr", "tinytex", "units", "uuid", "xfun", "xlsx"))
install.packages(c("backports", "BH", "brio", "car", "carData", "caTools", "classInt", "clipr", "colorspace", "cowplot", "crosstalk", "data.table", "DBI", "deldir", "dendextend", "digest", "e1071", "ellipse", "FactoMineR", "fansi", "flexmix", "forcats", "foreach", "Formula", "fpc", "gdtools", "ggplot2", "ggpubr", "ggrepel", "gplots", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "isoband", "iterators", "knitr", "labeling", "labelled", "later", "leaflet", "leafpop", "lme4", "lwgeom", "magrittr", "maptools", "mclust", "modeltools", "mvtnorm", "nloptr", "openssl", "openxlsx", "osrm", "packcircles", "pbkrtest", "pillar", "plyr", "promises", "purrr", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "rprojroot", "rstudioapi", "scales", "sf", "shiny", "sp", "SpatialPosition", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "svglite", "sys", "systemfonts", "tidyr", "tinytex", "units", "uuid", "xfun", "xlsx"))
install.packages(c("backports", "BH", "brio", "car", "carData", "caTools", "classInt", "clipr", "colorspace", "cowplot", "crosstalk", "data.table", "DBI", "deldir", "dendextend", "digest", "e1071", "ellipse", "FactoMineR", "fansi", "flexmix", "forcats", "foreach", "Formula", "fpc", "gdtools", "ggplot2", "ggpubr", "ggrepel", "gplots", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "isoband", "iterators", "knitr", "labeling", "labelled", "later", "leaflet", "leafpop", "lme4", "lwgeom", "magrittr", "maptools", "mclust", "modeltools", "mvtnorm", "nloptr", "openssl", "openxlsx", "osrm", "packcircles", "pbkrtest", "pillar", "plyr", "promises", "purrr", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "rprojroot", "rstudioapi", "scales", "sf", "shiny", "sp", "SpatialPosition", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "svglite", "sys", "systemfonts", "tidyr", "tinytex", "units", "uuid", "xfun", "xlsx"))
detach("package:DBI", unload = TRUE)
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages(c("backports", "BH", "brio", "car", "carData", "caTools", "classInt", "clipr", "colorspace", "cowplot", "crosstalk", "data.table", "deldir", "dendextend", "digest", "e1071", "ellipse", "FactoMineR", "fansi", "flexmix", "forcats", "foreach", "Formula", "fpc", "gdtools", "ggplot2", "ggpubr", "ggrepel", "gplots", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "isoband", "iterators", "knitr", "labeling", "labelled", "later", "leaflet", "leafpop", "lme4", "lwgeom", "magrittr", "maptools", "mclust", "modeltools", "mvtnorm", "nloptr", "openssl", "openxlsx", "osrm", "packcircles", "pbkrtest", "pillar", "plyr", "promises", "purrr", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "rprojroot", "rstudioapi", "scales", "sf", "shiny", "sp", "SpatialPosition", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "svglite", "sys", "systemfonts", "tidyr", "tinytex", "units", "uuid", "xfun", "xlsx"))
library(sf)
detach("package:sf", unload = TRUE)
library(rgdal)
library(leafpop)
detach("package:leafpop", unload = TRUE)
install.packages(c("leafpop", "lwgeom", "osrm", "rgdal", "sf", "SpatialPosition"))
library(sf)
detach("package:sf", unload = TRUE)
hist(dskdatavg$temperature, breaks = BRt,
freq=F, # fréquences
col="grey",
main = "Moyenne des températures entre 1/1/2017 et 5/4/2020 sur 1191 jours",
ylab = "densités",
xlab = "Moyenne des temperatures (°C)"
)
### calcul des paramètres pour la fonction lines() à superposer à l'histo
HHt <- hist(mfdatavg$temperature, breaks = BRt,  plot=F)
lines(HHt$mids, HHt$density, lwd = 2, col = "green") ### courbe non lissée  ## SO
lines(density(mfdatavg$temperature, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
## labels
text(03, 0.07, paste("Darksky"), cex = 1.2,  col = "black")
text(02, 0.06, paste("Météo France"), cex = 1.2,  col = "blue")
BRh <- seq(from= 0, to= 100, by=2) ## tient compte des deux distributions
hist(dskdatavg$humidity, breaks = BRh,
freq=F,
col="grey",
main = "Mean Humidity for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean Humidity (%)"
)
HHh <- hist(mfdatavg$humidite, breaks = BRh,  plot=F)
lines(HHh$mids, HHh$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(mfdatavg$humidite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(60, 0.04, paste("Darksky"), cex = 1.2,  col = "black")
text(55, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
?kruskal.test
## Kruskal-Wallis chi-squared = 2.5559, df = 1, p-value = 0.1099 => p-value non significative, les 2 échantillons ne sont pas significativement différents !
kruskal.test(temp ~ type, data = kwtempdata) ## ~ signifie : "en fonction de"
## Kruskal-Wallis chi-squared = 9.2389, df = 1, p-value = 0.002369 => p-value significative, les 2 échantillons sont significativement différents !
kruskal.test(temp ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
kwhumdata %>% kruskal_effsize(temp ~ type)
library(tidyverse)
library(ggpubr)
library(rstatix)
kwhumdata %>% kruskal_effsize(temp ~ type)
### Import des données pour le test kruskal.test() sur données mfdatavg$humidite, dskdatavg$humidity in : KW_temp_maille_42.csv
kwhumdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_hum_maille_42.csv", header = TRUE, sep = ";", dec = ".")
summary(kwhumdata)
## Kruskal-Wallis chi-squared = 9.2389, df = 1, p-value = 0.002369 => p-value significative, les 2 échantillons sont significativement différents !
kruskal.test(temp ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
## Kruskal-Wallis chi-squared = 9.2389, df = 1, p-value = 0.002369 => p-value significative, les 2 échantillons sont significativement différents !
kruskal.test(hum ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
### Import des données pour le test kruskal.test() sur données mfdatavg$humidite, dskdatavg$humidity in : KW_temp_maille_42.csv
kwhumdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_hum_maille_42.csv", header = TRUE, sep = ";", dec = ".")
## Kruskal-Wallis chi-squared = 9.2389, df = 1, p-value = 0.002369 => p-value significative, les 2 échantillons sont significativement différents !
kruskal.test(hum ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
### Import des données pour le test kruskal.test() sur données mfdatavg$humidite, dskdatavg$humidity in : KW_temp_maille_42.csv
kwhumdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_hum_maille_42.csv", header = TRUE, sep = ";", dec = ".")
View(kwhumdata)
### Import des données pour le test kruskal.test() sur données mfdatavg$humidite, dskdatavg$humidity in : KW_temp_maille_42.csv
kwhumdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_hum_maille_42.csv", header = TRUE, sep = ";", dec = ".")
### Import des données pour le test kruskal.test() sur données mfdatavg$humidite, dskdatavg$humidity in : KW_temp_maille_42.csv
kwhumdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_hum_maille_42.csv", header = TRUE, sep = ";", dec = ".")
summary(kwhumdata)
## Kruskal-Wallis chi-squared = 9.2389, df = 1, p-value = 0.002369 => p-value significative, les 2 échantillons sont significativement différents !
kruskal.test(hum ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
kwhumdata %>% kruskal_effsize(hum ~ type)
wilcox.test(hum ~ type, data = kwhumdata)
# Test de wilcoxon, plus adéquat pour deux groupes de comparaisons:
wilcox.test(temp ~ type, data = kwtempdata)
# Test de wilcoxon, plus adéquat pour deux groupes de comparaisons:
wilcox.test(temp ~ type, data = kwtempdata)
# Test de wilcoxon, plus adéquat pour deux groupes de comparaisons:
wilcox.test(hum ~ type, data = kwhumdata)
# construction du jeu de donnée:
dskdatavg$humidity
# construction du jeu de donnée:
dskhum <- dskdatavg$humidity
dskhum
mfhum <- mfdatavg$humidite
kwhumdata2 <- cbind(dskhum,mfhum)
kwhumdata2
kwhumdata2 <- rbind(dskhum,mfhum)
kwhumdata2
View(kwhumdata2)
kwhumdata2 <- cbind(dskhum,mfhum)
View(kwhumdata2)
kwhumdata2 <- rbind(dskhum,mfhum)
View(kwhumdata2)
# construction du jeu de donnée:
dskhum <- data.frame(dskdatavg$humidity,type)
dskhum <- data.frame(dskdatavg$humidity, type)
# construction du jeu de donnée:
type <- "type"
dskhum <- data.frame(dskdatavg$humidity, type)
View(dskhum)
# construction du jeu de donnée:
type <- ""
dskhum <- data.frame(dskdatavg$humidity, type)
View(dskhum)
dskhum <- data.frame(hum=dskdatavg$humidity, type)
View(dskhum)
mfhum <- data.frame(hum=mfdatavg$humidite,type)
View(mfhum)
# construction du jeu de donnée:
typedsk <- "dsk"
typemf <- 'mf'
dskhum <- data.frame(hum=dskdatavg$humidity, typedsk)
typemf <- 'mf'
mfhum <- data.frame(hum=mfdatavg$humidite,typemdf)
mfhum <- data.frame(hum=mfdatavg$humidite,typemf)
View(mfhum)
View(dskhum)
mfhum <- data.frame(hum=trunc(mfdatavg$humidite),typemf)
kwhumdata2 <- rbind(dskhum,mfhum)
# construction du jeu de donnée:
type <- "dsk"
dskhum <- data.frame(hum=dskdatavg$humidity, typedsk)
View(dskhum)
# construction du jeu de donnée:
type <- "dsk"
dskhum <- data.frame(hum=dskdatavg$humidity, type)
type <- 'mf'
mfhum <- data.frame(hum=trunc(mfdatavg$humidite),typemf)
View(mfhum)
mfhum <- data.frame(hum=trunc(mfdatavg$humidite),type)
kwhumdata2 <- rbind(dskhum,mfhum)
View(kwhumdata2)
kruskal.test(hum ~ type, data = kwhumdata2) ## ~ signifie : "en fonction de"
# Test de l'effet de taille: résultat: effet= 0.00346 sur une échelle de 0 à 1, donc très petit.
kwhumdata2 %>% kruskal_effsize(hum ~ type)
# Test de wilcoxon, plus adéquat pour deux groupes de comparaisons:
wilcox.test(hum ~ type, data = kwhumdata2)
View(kwtempdata)
hist(dskdatavg$humidity, breaks = BRh,
freq=F,
col="grey",
main = "Mean Humidity for 42 Météo France Synoptic Stations \n (France, july 2017 - february 2020), 1 191 days",
ylab = "Densities",
xlab = "Mean Humidity (%)"
)
HHh <- hist(trunc(mfdatavg$humidite), breaks = BRh,  plot=F)
lines(HHh$mids, HHh$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(mfdatavg$humidite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(60, 0.04, paste("Darksky"), cex = 1.2,  col = "black")
text(55, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
HHh <- hist(mfdatavg$humidite, breaks = BRh,  plot=F)
lines(HHh$mids, HHh$density, lwd = 2, col = "green") ### courbe non lissée  ## SO
lines(density(mfdatavg$humidite, na.rm = TRUE), lwd = 2, col = "red") ### courbe lissée, kernel
lines(density(mfdatavg$humidite, na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
lines(density(trunc(mfdatavg$humidite), na.rm = TRUE), lwd = 2, col = "red") ### courbe lissée, kernel
text(60, 0.04, paste("Darksky"), cex = 1.2,  col = "black")
text(55, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
kwhumdata <- rbind(dskhum,mfhum)
kwhumdata
summary(kwhumdata)
kruskal.test(hum ~ type, data = kwhumdata2) ## ~ signifie : "en fonction de"
# Test de l'effet de taille: résultat: effet= 0.00346 sur une échelle de 0 à 1, donc très petit.
kwhumdata %>% kruskal_effsize(hum ~ type)
# Test de wilcoxon, plus adéquat pour deux groupes de comparaisons:
wilcox.test(hum ~ type, data = kwhumdata)
dsktmp <- data.frame(dskdatavg$temperature, type)
View(dsktmp)
type <- "mf"
type <- "mf"
mftmp <- data.frame(mfdatavg$temperature, type)
View(mftmp)
kwtempdata <- rbind(dsktmp,mftmp)
# ### Import des données pour le test kruskal.test() sur données mfdatavg$temperature, dskdatavg$temperature in : KW_temp_maille_42.csv
# kwtempdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_temp_maille_42.csv", header = TRUE, sep = ";", dec = ".")
type <- "dsk"
dsktmp <- data.frame(dskdatavg$temperature, type)
type <- "mf"
mftmp <- data.frame(mfdatavg$temperature, type)
# ### Import des données pour le test kruskal.test() sur données mfdatavg$temperature, dskdatavg$temperature in : KW_temp_maille_42.csv
# kwtempdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/KW_temp_maille_42.csv", header = TRUE, sep = ";", dec = ".")
type <- "dsk"
dsktmp <- data.frame(temp=dskdatavg$temperature, type)
type <- "mf"
mftmp <- data.frame(temp=mfdatavg$temperature, type)
kwtempdata <- rbind(dsktmp,mftmp)
View(kwtempdata)
View(kwhumdata2)
rm(kwhumdata2)
#MF
shapiro.test(trunc(mfdatavg$humidite))
#DSK
shapiro.test(dskdatavg$humidity)
######### Test des distributions statistiques
## References :
## Patrick Royston (1982). An extension of Shapiro and Wilk's W test for normality to large samples. Applied Statistics, 31, 115–124. doi: 10.2307/2347973.
shapiro.test(dskdatavg$temperature)
shapiro.test(mfdatavg$temperature)
######### Test des distributions statistiques
## References :
## Patrick Royston (1982). An extension of Shapiro and Wilk's W test for normality to large samples. Applied Statistics, 31, 115–124. doi: 10.2307/2347973.
shapiro.test(dskdatavg$temperature)
shapiro.test(mfdatavg$temperature)
### t.test entre les différentes températures
t.test(mfdatavg$temperature,dskdatavg$temperature)
### t.test entre les différentes températures
t.test(trunc(MFdata$humidite),DSKdata$humidity) # t = 2.9604, df = 2370.3, p-value = 0.003103 => p-value significative, les 2 échantillons sont significativement différents !
### Or, if .csv file, use this si données séparées par ";"
DSKdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/dsk_moyennes_journalieres_maille_42.csv", header = TRUE, sep = ";", dec = ".")
MFdata <- read.csv("../../data/donnee_meteo_nationale_comparative/comparaison/mf_moyennes_journalieres_maille_42.csv", header = TRUE, sep = ";", dec = ".")
### t.test entre les différentes températures
t.test(trunc(MFdata$humidite),DSKdata$humidity) # t = 2.9604, df = 2370.3, p-value = 0.003103 => p-value significative, les 2 échantillons sont significativement différents !
shapiro.test(trunc(MFdata$humidite)) # W = 0.97952, p-value = 6.121e-12 => p-value significative, l'échantillon ne suit pas une loi normale.
qqplot(trunc(MFdata$humidite),DSKdata$humidity)
#DSK
shapiro.test(dskdatavg$humidity)
#DSK
shapiro.test(dskdatavg$humidity)
#MF
shapiro.test(trunc(mfdatavg$humidite))
### t.test entre les différentes humidités
t.test(trunc(MFdata$humidite),dskdatavg$humidity)
kruskal.test(hum ~ type, data = kwhumdata2) ## ~ signifie : "en fonction de"
kruskal.test(hum ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
# Test de l'effet de taille: résultat: effet= 0.00346 sur une échelle de 0 à 1, donc très petit.
kwhumdata %>% kruskal_effsize(hum ~ type)
# Test de wilcoxon, plus adéquat pour deux groupes de comparaisons:
wilcox.test(hum ~ type, data = kwhumdata)
############################## Analyse des Températures moyennes ########################################
rnorm(100, mean = 5, sd = 3)
############################## Analyse des Températures moyennes ########################################
norm <- rnorm(100, mean = 5, sd = 3)
qqplot(dskdata$temperature, norm, plot.it = TRUE)
qqplot(norm, dskdata$temperature, plot.it = TRUE)
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(norm, dskdata$humidity, plot.it = TRUE)
qqplot(norm, trunc(mfdatavg$humidite), plot.it = TRUE)
qqplot(norm, dskdatavg$temperature, plot.it = TRUE)
qqplot(norm, mfdatavg$temperature, plot.it = TRUE)
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(norm, dskdatavg$humidity, plot.it = TRUE)
qqplot(norm, trunc(mfdatavg$humidite), plot.it = TRUE)
plot(norm)
hist(norm)
Brnorm <- seq(from=-2, to=12,by=.1)
hist(norm, breaks = Brnorm)
Brnorm <- seq(from=-2, to=12,by=1)
hist(norm, breaks = Brnorm)
Brnorm <- seq(from=-2, to=12,by=2)
hist(norm, breaks = Brnorm)
Brnorm <- seq(from=-2, to=12,by=1)
hist(norm, breaks = Brnorm)
Brnorm <- seq(from=-10, to=20,by=1)
hist(norm, breaks = Brnorm)
shapiro.test(norm)
qqplot(norm, dskdatavg$temperature, plot.it = TRUE)
qqplot(norm, mfdatavg$temperature, plot.it = TRUE)
abline(1,1)
abline(0,0)
abline(5,5)
?qqplot
qqnorm(dskdatavg$humidity)
qqline(dskdatavg$humidity)
qqline(dskdatavg$humidity, col = "steelblue", lwd = 2)
############################## Analyse de l'humidité moyenne DSK vs MF ##############################
qqplot(norm, dskdatavg$humidity, plot.it = TRUE)
qqnorm(mfdatavg$humidite, pch = 1, frame = FALSE)
qqline(mfdatavg$humidite, col = "steelblue", lwd = 2)
qqnorm(mfdatavg$humidite, pch = 1, frame = TRUE)
qqline(mfdatavg$humidite, col = "steelblue", lwd = 2)
qqnorm(dskdatavg$humidity)
qqline(dskdatavg$humidity, col = "steelblue", lwd = 2)
qqnorm(trunc(mfdatavg$humidite), pch = 1, frame = TRUE)
qqline(trunc(mfdatavg$humidite), col = "steelblue", lwd = 2)
qqnorm(dskdatavg$humidity, pch = 1, frame = TRUE)
qqline(dskdatavg$humidity, col = "steelblue", lwd = 2)
qqnorm(dskdatavg$humidity, pch = 1, frame = TRUE, ylab = "humidité DSK")
qqline(dskdatavg$humidity, col = "steelblue", lwd = 2)
qqnorm(trunc(mfdatavg$humidite), pch = 1, frame = TRUE, ylab = "humidité MF")
qqline(trunc(mfdatavg$humidite), col = "steelblue", lwd = 2)
############################## Analyse des Températures moyennes ########################################
qqnorm(dskdatavg$temperature, pch = 1, frame = TRUE, ylab = "température moyenne DSK")
qqline(dskdatavg$temperature, col = "steelblue", lwd = 2)
qqnorm(mfdatavg$temperature, pch = 1, frame = TRUE, ylab = "temérature moyenne MF")
qqline(mfdatavg$temperature, col = "steelblue", lwd = 2)
qqnorm(mfdatavg$temperature, pch = 1, frame = TRUE, ylab = "température moyenne MF")
qqline(mfdatavg$temperature, col = "steelblue", lwd = 2)
qqPlot(dskdatavg$temperature)
qqplot(dskdatavg$temperature)
qqplot(dskdatavg$temperature)
library(car)
qqPlot(dskdatavg$temperature)
qqPlot(dskdatavg$humidity)
############################## Analyse des Températures moyennes ########################################
# qqnorm(dskdatavg$temperature, pch = 1, frame = TRUE, ylab = "température moyenne DSK")
# qqline(dskdatavg$temperature, col = "steelblue", lwd = 2)
#
# qqnorm(mfdatavg$temperature, pch = 1, frame = TRUE, ylab = "température moyenne MF")
# qqline(mfdatavg$temperature, col = "steelblue", lwd = 2)
qqPlot(dskdatavg$humidity)
############################## Analyse des Températures moyennes ########################################
# qqnorm(dskdatavg$temperature, pch = 1, frame = TRUE, ylab = "température moyenne DSK")
# qqline(dskdatavg$temperature, col = "steelblue", lwd = 2)
#
# qqnorm(mfdatavg$temperature, pch = 1, frame = TRUE, ylab = "température moyenne MF")
# qqline(mfdatavg$temperature, col = "steelblue", lwd = 2)
qqPlot(dskdatavg$humidity, ylab = "température moyenne DSK")
qqPlot(mfdatavg$humidite, ylab = "température moyenne MF")
qqPlot(dskdatavg$humidity, ylab = "température moyenne DSK")
qqPlot(mfdatavg$humidite, ylab = "température moyenne MF")
############################## Analyse des Températures moyennes ########################################
# qqnorm(dskdatavg$temperature, pch = 1, frame = TRUE, ylab = "température moyenne DSK")
# qqline(dskdatavg$temperature, col = "steelblue", lwd = 2)
#
# qqnorm(mfdatavg$temperature, pch = 1, frame = TRUE, ylab = "température moyenne MF")
# qqline(mfdatavg$temperature, col = "steelblue", lwd = 2)
qqPlot(dskdatavg$temperature, ylab = "température moyenne DSK")
qqPlot(mfdatavg$temperature, ylab = "température moyenne MF")
qqPlot(dskdatavg$humidity, ylab = "humidité moyenne DSK")
qqPlot(mfdatavg$humidite, ylab = "humidité moyenne MF")
kruskal.test(temp ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
kruskal.test(hum ~ type, data = kwhumdata) ## ~ signifie : "en fonction de"
BRh <- seq(from= 0, to= 100, by=2) ## tient compte des deux distributions
hist(dskdatavg$humidity, breaks = BRh,
freq=F,
col="grey",
main = "Moyenne de l'humidité entre 1/1/2017 et 5/4/2020 sur 1191 jours",
ylab = "Densities",
xlab = "Mean Humidity (%)"
)
HHh <- hist(mfdatavg$humidite, breaks = BRh,  plot=F)
lines(HHh$mids, HHh$density, lwd = 2, col = "green") ### courbe non lissée  ## SO
lines(density(mfdatavg$humidite, na.rm = TRUE), lwd = 2, col = "red") ### courbe lissée, kernel
text(60, 0.04, paste("Darksky"), cex = 1.2,  col = "black")
text(55, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
HHh <- hist(trunc(mfdatavg$humidite), breaks = BRh,  plot=F)
lines(HHh$mids, HHh$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(trunc(mfdatavg$humidite), na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
#DSK
shapiro.test(dskdatavg$humidity)
#MF
shapiro.test(trunc(mfdatavg$humidite))
### t.test entre les différentes humidités
t.test(trunc(mfdatavg$humidite),dskdatavg$humidity)
library(abind)
detach("package:abind", unload = TRUE)
BRh <- seq(from= 0, to= 100, by=2) ## tient compte des deux distributions
hist(dskdatavg$humidity, breaks = BRh,
freq=F,
col="grey",
main = "Moyenne de l'humidité entre 1/1/2017 et 5/4/2020 sur 1191 jours",
ylab = "Densities",
xlab = "Mean Humidity (%)"
)
HHh <- hist(trunc(mfdatavg$humidite), breaks = BRh,  plot=F)
lines(HHh$mids, HHh$density, lwd = 2, col = "orange") ### courbe non lissée  ## SO
lines(density(trunc(mfdatavg$humidite), na.rm = TRUE), lwd = 2, col = "blue") ### courbe lissée, kernel
text(60, 0.04, paste("Darksky"), cex = 1.2,  col = "black")
text(55, 0.03, paste("Météo France"), cex = 1.2,  col = "blue")
