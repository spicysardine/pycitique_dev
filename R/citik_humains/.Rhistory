'ra'=list('name'='Rhône-Alpes', 'report'=humdata_ra, 'witness'=DSKdata_700avg_ra )
)
graphlist <- list()
weatherPlot <- function(reportdata, witnessdata, region, param){
paramname <- paramlist[[param]]
## General theme
legende <- c('Reports'='#0000ff',
'Reports Model'='#000000',
'Random Witness'='#00ff00',
'Random Witness Model'='#ff0000')
ggplot(reportdata, aes(x=date_piqure_saisie))+
geom_jitter(aes(y=reportdata[,param], color='Reports'), size=.1, alpha=.6)+
geom_smooth(aes(y=reportdata[,param], color='Reports Model'), size=.5)+
geom_line(data = witnessdata,
aes(date_releve, witnessdata[,param], color='Random Witness'),
size=.5,
alpha=.7)+
geom_smooth(data=witnessdata, aes(date_releve, witnessdata[,param], color='Random Witness Model'), size=.5)+
ggtitle(paste('Seasonal distribution of ',paramname,' associated with reports vs witnesses measurements
in ',region,' from 2017-03-31 to 2020-04-01'))+
geom_line(y=0, colour='grey50', linetype='dotdash')+
xlab(label = 'Date')+
ylab(label=paramname)+
labs(color='Legende: ')+
theme(axis.text.x = element_text(angle = 35, color='grey20', size = 9, vjust = 1, hjust = 1) )+
# theme(axis.text.y = element_text(color='grey20', size = 6) )+
theme(legend.position = 'top')+
scale_y_continuous( breaks = seq(floor(min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)), by=5),
limits = c(floor( min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)) ) )+
scale_x_date( expand = c(0,0),
limits=as.Date( c('2017-03-31','2020-04-01')),
date_labels = '%b %Y',
date_breaks = '2 month')+
scale_color_manual(values=legende)+plotstyle
}
graphlist[['france']] <- weatherPlot(datalist$france$report, datalist$france$witness, datalist$france$name, param)
graphlist[['idf']]    <- weatherPlot(datalist$idf$report, datalist$idf$witness, datalist$idf$name, param)
graphlist[['al']]     <- weatherPlot(datalist$al$report, datalist$al$witness, datalist$al$name, param)
graphlist[['ra']]     <- weatherPlot(datalist$ra$report, datalist$ra$witness, datalist$ra$name, param)
plotgrid <- plot_grid(plotlist=graphlist, labels = 'AUTO', ncol=2, nrow=2, align = 'hv')
plotgrid
}
weatherPlotGrid('temperature')
weatherPlotGrid <- function(param){
paramlist <- list("temperature"='Temperature (°C)',
"temperaturehigh"='Day temperature (°C)',
"temperaturelow"='Night temperature',
'humidity'='Humidity (%)',
"dewpoint"='Dewpoint (°C)',
"pressure"='Atmospheric Pressure (hPa)',
"windspeed"='Windspeed (m/s)',
"visibility"='Visibility (km)',
"cloudcover"='Cloud cover (%)',
'precipintensity'='Precipitation Intensity mm/h',
"windgust"='Wind Gust (m/s)',
'uvindex'='UV Index (scale 1 to 10)')
datalist <- list('france'=list('name'='France', 'report'=humdata, 'witness'=DSKdata_700avg ),
'idf'=list('name'='île-de-France', 'report'=humdata_idf, 'witness'=DSKdata_700avg_idf ),
'al'=list('name'='Alsace', 'report'=humdata_al,'witness'=DSKdata_700avg_al ),
'ra'=list('name'='Rhône-Alpes', 'report'=humdata_ra, 'witness'=DSKdata_700avg_ra )
)
graphlist <- list()
weatherPlot <- function(reportdata, witnessdata, region, param){
paramname <- paramlist[[param]]
## General theme
legende <- c('Reports'='#0000ff',
'Reports Model'='#000000',
'Random Witness'='#00ff00',
'Random Witness Model'='#ff0000')
ggplot(reportdata, aes(x=date_piqure_saisie))+
geom_jitter(aes(y=reportdata[,param], color='Reports'), size=.1, alpha=.6)+
geom_smooth(aes(y=reportdata[,param], color='Reports Model'), size=.5)+
geom_line(data = witnessdata,
aes(date_releve, witnessdata[,param], color='Random Witness'),
size=.5,
alpha=.7)+
geom_smooth(data=witnessdata, aes(date_releve, witnessdata[,param], color='Random Witness Model'), size=.5)+
ggtitle(paste('Seasonal distribution of ',paramname,' associated with reports vs witnesses measurements
in ',region,' from 2017-03-31 to 2020-04-01'))+
geom_line(y=0, colour='grey50', linetype='dotdash')+
xlab(label = 'Date')+
ylab(label=paramname)+
labs(color='Legende: ')+
theme(axis.text.x = element_text(angle = 35, color='grey20', size = 9, vjust = 1, hjust = 1) )+
# theme(axis.text.y = element_text(color='grey20', size = 6) )+
theme(legend.position = 'top')+
scale_y_continuous( breaks = seq(floor(min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)), by=2),
limits = c(floor( min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)) ) )+
scale_x_date( expand = c(0,0),
limits=as.Date( c('2017-03-31','2020-04-01')),
date_labels = '%b %Y',
date_breaks = '2 month')+
scale_color_manual(values=legende)+plotstyle
}
graphlist[['france']] <- weatherPlot(datalist$france$report, datalist$france$witness, datalist$france$name, param)
graphlist[['idf']]    <- weatherPlot(datalist$idf$report, datalist$idf$witness, datalist$idf$name, param)
graphlist[['al']]     <- weatherPlot(datalist$al$report, datalist$al$witness, datalist$al$name, param)
graphlist[['ra']]     <- weatherPlot(datalist$ra$report, datalist$ra$witness, datalist$ra$name, param)
plotgrid <- plot_grid(plotlist=graphlist, labels = 'AUTO', ncol=2, nrow=2, align = 'hv')
plotgrid
}
weatherPlotGrid('temperature')
t <- weatherPlotGrid('temperature')
plotsave(t, 'temperature_plot_grid.png', format='landscape', extension='png')
## Definition d’un theme general pour les graphs du module
plotstyle <-  theme(plot.title = element_text(hjust = .5, face = 'bold', size = 9))+
theme(axis.title = element_text(face = 'bold', size = 9))
weatherPlotGrid <- function(param){
paramlist <- list("temperature"='Temperature (°C)',
"temperaturehigh"='Day temperature (°C)',
"temperaturelow"='Night temperature',
'humidity'='Humidity (%)',
"dewpoint"='Dewpoint (°C)',
"pressure"='Atmospheric Pressure (hPa)',
"windspeed"='Windspeed (m/s)',
"visibility"='Visibility (km)',
"cloudcover"='Cloud cover (%)',
'precipintensity'='Precipitation Intensity mm/h',
"windgust"='Wind Gust (m/s)',
'uvindex'='UV Index (scale 1 to 10)')
datalist <- list('france'=list('name'='France', 'report'=humdata, 'witness'=DSKdata_700avg ),
'idf'=list('name'='île-de-France', 'report'=humdata_idf, 'witness'=DSKdata_700avg_idf ),
'al'=list('name'='Alsace', 'report'=humdata_al,'witness'=DSKdata_700avg_al ),
'ra'=list('name'='Rhône-Alpes', 'report'=humdata_ra, 'witness'=DSKdata_700avg_ra )
)
graphlist <- list()
weatherPlot <- function(reportdata, witnessdata, region, param){
paramname <- paramlist[[param]]
## General theme
legende <- c('Reports'='#0000ff',
'Reports Model'='#000000',
'Random Witness'='#00ff00',
'Random Witness Model'='#ff0000')
ggplot(reportdata, aes(x=date_piqure_saisie))+
geom_jitter(aes(y=reportdata[,param], color='Reports'), size=.1, alpha=.6)+
geom_smooth(aes(y=reportdata[,param], color='Reports Model'), size=.5)+
geom_line(data = witnessdata,
aes(date_releve, witnessdata[,param], color='Random Witness'),
size=.5,
alpha=.7)+
geom_smooth(data=witnessdata, aes(date_releve, witnessdata[,param], color='Random Witness Model'), size=.5)+
ggtitle(paste('Seasonal distribution of ',paramname,' associated with reports vs witnesses measurements
in ',region,' from 2017-03-31 to 2020-04-01'))+
geom_line(y=0, colour='grey50', linetype='dotdash')+
xlab(label = 'Date')+
ylab(label=paramname)+
labs(color='Legende: ')+
theme(axis.text.x = element_text(angle = 35, color='grey20', size = 9, vjust = 1, hjust = 1) )+
# theme(axis.text.y = element_text(color='grey20', size = 6) )+
theme(legend.position = 'top')+
scale_y_continuous( breaks = seq(floor(min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)), by=2),
limits = c(floor( min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)) ) )+
scale_x_date( expand = c(0,0),
limits=as.Date( c('2017-03-31','2020-04-01')),
date_labels = '%b %Y',
date_breaks = '2 month')+
scale_color_manual(values=legende)+plotstyle
}
graphlist[['france']] <- weatherPlot(datalist$france$report, datalist$france$witness, datalist$france$name, param)
graphlist[['idf']]    <- weatherPlot(datalist$idf$report, datalist$idf$witness, datalist$idf$name, param)
graphlist[['al']]     <- weatherPlot(datalist$al$report, datalist$al$witness, datalist$al$name, param)
graphlist[['ra']]     <- weatherPlot(datalist$ra$report, datalist$ra$witness, datalist$ra$name, param)
plotgrid <- plot_grid(plotlist=graphlist, labels = 'AUTO', ncol=2, nrow=2, align = 'hv')
plotgrid
}
t <- weatherPlotGrid('temperature')
plotsave(t, 'temperature_plot_grid.png', format='landscape', extension='png')
## Defining plotsaving Function Template
plotsave <- function(plot, plotname, extension='png', format, plotpath=NULL){
if(format=='portrait'){
height=11.69
width=8.27
}else if (format=='landscape'){
width=11.69
height=8.27
}
ggsave2(filename = plotname,
plot = plot,
path = plotpath,
device= extension,
width=width, # format A4
height=height,
units = 'in',
dpi = 92,
limitsize=TRUE)
}
## Definition d’un theme general pour les graphs du module
plotstyle <-  theme(plot.title = element_text(hjust = .5, face = 'bold', size = 12))+
theme(axis.title = element_text(face = 'bold', size = 9))
weatherPlotGrid <- function(param){
paramlist <- list("temperature"='Temperature (°C)',
"temperaturehigh"='Day temperature (°C)',
"temperaturelow"='Night temperature',
'humidity'='Humidity (%)',
"dewpoint"='Dewpoint (°C)',
"pressure"='Atmospheric Pressure (hPa)',
"windspeed"='Windspeed (m/s)',
"visibility"='Visibility (km)',
"cloudcover"='Cloud cover (%)',
'precipintensity'='Precipitation Intensity mm/h',
"windgust"='Wind Gust (m/s)',
'uvindex'='UV Index (scale 1 to 10)')
datalist <- list('france'=list('name'='France', 'report'=humdata, 'witness'=DSKdata_700avg ),
'idf'=list('name'='île-de-France', 'report'=humdata_idf, 'witness'=DSKdata_700avg_idf ),
'al'=list('name'='Alsace', 'report'=humdata_al,'witness'=DSKdata_700avg_al ),
'ra'=list('name'='Rhône-Alpes', 'report'=humdata_ra, 'witness'=DSKdata_700avg_ra )
)
graphlist <- list()
weatherPlot <- function(reportdata, witnessdata, region, param){
paramname <- paramlist[[param]]
## General theme
legende <- c('Reports'='#0000ff',
'Reports Model'='#000000',
'Random Witness'='#00ff00',
'Random Witness Model'='#ff0000')
ggplot(reportdata, aes(x=date_piqure_saisie))+
geom_jitter(aes(y=reportdata[,param], color='Reports'), size=.1, alpha=.6)+
geom_smooth(aes(y=reportdata[,param], color='Reports Model'), size=.5)+
geom_line(data = witnessdata,
aes(date_releve, witnessdata[,param], color='Random Witness'),
size=.5,
alpha=.7)+
geom_smooth(data=witnessdata, aes(date_releve, witnessdata[,param], color='Random Witness Model'), size=.5)+
ggtitle(paste('Seasonal distribution of ',paramname,' associated with reports vs witnesses measurements
in ',region,' from 2017-03-31 to 2020-04-01'))+
geom_line(y=0, colour='grey50', linetype='dotdash')+
xlab(label = 'Date')+
ylab(label=paramname)+
labs(color='Legende: ')+
theme(axis.text.x = element_text(angle = 35, color='grey20', size = 9, vjust = 1, hjust = 1) )+
# theme(axis.text.y = element_text(color='grey20', size = 6) )+
theme(legend.position = 'top')+
scale_y_continuous( breaks = seq(floor(min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)), by=2),
limits = c(floor( min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)) ) )+
scale_x_date( expand = c(0,0),
limits=as.Date( c('2017-03-31','2020-04-01')),
date_labels = '%b %Y',
date_breaks = '2 month')+
scale_color_manual(values=legende)+plotstyle
}
graphlist[['france']] <- weatherPlot(datalist$france$report, datalist$france$witness, datalist$france$name, param)
graphlist[['idf']]    <- weatherPlot(datalist$idf$report, datalist$idf$witness, datalist$idf$name, param)
graphlist[['al']]     <- weatherPlot(datalist$al$report, datalist$al$witness, datalist$al$name, param)
graphlist[['ra']]     <- weatherPlot(datalist$ra$report, datalist$ra$witness, datalist$ra$name, param)
plotgrid <- plot_grid(plotlist=graphlist, labels = 'AUTO', ncol=2, nrow=2, align = 'hv')
plotgrid
}
t <- weatherPlotGrid('temperature')
plotsave(t, 'temperature_plot_grid.png', format='landscape', extension='png')
plotsave(t, 'temperature_plot_grid.png', format='landscape', extension='png')
weatherPlotGrid('humidity')
weatherPlotGrid('humidity')
weatherPlotGrid <- function(param){
paramlist <- list("temperature"='Temperature (°C)',
"temperaturehigh"='Day temperature (°C)',
"temperaturelow"='Night temperature',
'humidity'='Humidity (%)',
"dewpoint"='Dewpoint (°C)',
"pressure"='Atmospheric Pressure (hPa)',
"windspeed"='Windspeed (m/s)',
"visibility"='Visibility (km)',
"cloudcover"='Cloud cover (%)',
'precipintensity'='Precipitation Intensity mm/h',
"windgust"='Wind Gust (m/s)',
'uvindex'='UV Index (scale 1 to 10)')
datalist <- list('france'=list('name'='France', 'report'=humdata, 'witness'=DSKdata_700avg ),
'idf'=list('name'='île-de-France', 'report'=humdata_idf, 'witness'=DSKdata_700avg_idf ),
'al'=list('name'='Alsace', 'report'=humdata_al,'witness'=DSKdata_700avg_al ),
'ra'=list('name'='Rhône-Alpes', 'report'=humdata_ra, 'witness'=DSKdata_700avg_ra )
)
graphlist <- list()
weatherPlot <- function(reportdata, witnessdata, region, param){
paramname <- paramlist[[param]]
## General theme
legende <- c('Reports'='#0000ff',
'Reports Model'='#000000',
'Random Witness'='#00ff00',
'Random Witness Model'='#ff0000')
ggplot(reportdata, aes(x=date_piqure_saisie))+
geom_jitter(aes(y=reportdata[,param], color='Reports'), size=.1, alpha=.6)+
geom_smooth(aes(y=reportdata[,param], color='Reports Model'), size=.5)+
geom_line(data = witnessdata,
aes(date_releve, witnessdata[,param], color='Random Witness'),
size=.5,
alpha=.7)+
geom_smooth(data=witnessdata, aes(date_releve, witnessdata[,param], color='Random Witness Model'), size=.5)+
ggtitle(paste('Seasonal distribution of ',paramname,' associated with reports vs witnesses measurements
in ',region,' from 2017-03-31 to 2020-04-01'))+
geom_line(y=0, colour='grey50', linetype='dotdash')+
xlab(label = 'Date')+
ylab(label=paramname)+
labs(color='Legende: ')+
theme(axis.text.x = element_text(angle = 35, color='grey20', size = 9, vjust = 1, hjust = 1) )+
# theme(axis.text.y = element_text(color='grey20', size = 6) )+
theme(legend.position = 'top')+
scale_y_continuous( breaks = seq(floor(min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)), by=3),
limits = c(floor( min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)) ) )+
scale_x_date( expand = c(0,0),
limits=as.Date( c('2017-03-31','2020-04-01')),
date_labels = '%b %Y',
date_breaks = '2 month')+
scale_color_manual(values=legende)+plotstyle
}
graphlist[['france']] <- weatherPlot(datalist$france$report, datalist$france$witness, datalist$france$name, param)
graphlist[['idf']]    <- weatherPlot(datalist$idf$report, datalist$idf$witness, datalist$idf$name, param)
graphlist[['al']]     <- weatherPlot(datalist$al$report, datalist$al$witness, datalist$al$name, param)
graphlist[['ra']]     <- weatherPlot(datalist$ra$report, datalist$ra$witness, datalist$ra$name, param)
plotgrid <- plot_grid(plotlist=graphlist, labels = 'AUTO', ncol=2, nrow=2, align = 'hv')
plotgrid
}
weatherPlotGrid('humidity')
ggplot(reportdata, aes(x=date_piqure_saisie))+
geom_jitter(aes(y=reportdata[,param], color='Reports'), size=.1, alpha=.6)+
geom_smooth(aes(y=reportdata[,param], color='Reports Model'), size=.5)+
geom_line(data = witnessdata,
aes(date_releve, witnessdata[,param], color='Random Witness'),
size=.5,
alpha=.7)+
geom_smooth(data=witnessdata, aes(date_releve, witnessdata[,param], color='Random Witness Model'), size=.5)+
ggtitle(paste('Seasonal distribution of ',paramname,' associated with reports vs witnesses measurements
in ',region,' from 2017-03-31 to 2020-04-01'))+
geom_line(y=0, colour='grey50', linetype='dotdash')+
xlab(label = 'Date')+
ylab(label=paramname)+
labs(color='Legende: ')+
theme(axis.text.x = element_text(angle = 35, color='grey20', size = 9, vjust = 1, hjust = 1) )+
# theme(axis.text.y = element_text(color='grey20', size = 6) )+
theme(legend.position = 'top')+
scale_y_continuous( breaks = seq(floor(min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)), by=5),
limits = c(floor( min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)) ) )+
scale_x_date( expand = c(0,0),
limits=as.Date( c('2017-03-31','2020-04-01')),
date_labels = '%b %Y',
date_breaks = '2 month')+
scale_color_manual(values=legende)+plotstyle
weatherPlot <- function(reportdata, witnessdata, region, param){
paramname <- paramlist[[param]]
## General theme
legende <- c('Reports'='#0000ff',
'Reports Model'='#000000',
'Random Witness'='#00ff00',
'Random Witness Model'='#ff0000')
ggplot(reportdata, aes(x=date_piqure_saisie))+
geom_jitter(aes(y=reportdata[,param], color='Reports'), size=.1, alpha=.6)+
geom_smooth(aes(y=reportdata[,param], color='Reports Model'), size=.5)+
geom_line(data = witnessdata,
aes(date_releve, witnessdata[,param], color='Random Witness'),
size=.5,
alpha=.7)+
geom_smooth(data=witnessdata, aes(date_releve, witnessdata[,param], color='Random Witness Model'), size=.5)+
ggtitle(paste('Seasonal distribution of ',paramname,' associated with reports vs witnesses measurements
in ',region,' from 2017-03-31 to 2020-04-01'))+
geom_line(y=0, colour='grey50', linetype='dotdash')+
xlab(label = 'Date')+
ylab(label=paramname)+
labs(color='Legende: ')+
theme(axis.text.x = element_text(angle = 35, color='grey20', size = 9, vjust = 1, hjust = 1) )+
# theme(axis.text.y = element_text(color='grey20', size = 6) )+
theme(legend.position = 'top')+
scale_y_continuous( breaks = seq(floor(min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)), by=5),
limits = c(floor( min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)) ) )+
scale_x_date( expand = c(0,0),
limits=as.Date( c('2017-03-31','2020-04-01')),
date_labels = '%b %Y',
date_breaks = '2 month')+
scale_color_manual(values=legende)+plotstyle
}
weatherPlotGrid('humidity')
weatherPlotGrid <- function(param){
paramlist <- list("temperature"='Temperature (°C)',
"temperaturehigh"='Day temperature (°C)',
"temperaturelow"='Night temperature',
'humidity'='Humidity (%)',
"dewpoint"='Dewpoint (°C)',
"pressure"='Atmospheric Pressure (hPa)',
"windspeed"='Windspeed (m/s)',
"visibility"='Visibility (km)',
"cloudcover"='Cloud cover (%)',
'precipintensity'='Precipitation Intensity mm/h',
"windgust"='Wind Gust (m/s)',
'uvindex'='UV Index (scale 1 to 10)')
datalist <- list('france'=list('name'='France', 'report'=humdata, 'witness'=DSKdata_700avg ),
'idf'=list('name'='île-de-France', 'report'=humdata_idf, 'witness'=DSKdata_700avg_idf ),
'al'=list('name'='Alsace', 'report'=humdata_al,'witness'=DSKdata_700avg_al ),
'ra'=list('name'='Rhône-Alpes', 'report'=humdata_ra, 'witness'=DSKdata_700avg_ra )
)
graphlist <- list()
weatherPlot <- function(reportdata, witnessdata, region, param){
paramname <- paramlist[[param]]
## General theme
legende <- c('Reports'='#0000ff',
'Reports Model'='#000000',
'Random Witness'='#00ff00',
'Random Witness Model'='#ff0000')
ggplot(reportdata, aes(x=date_piqure_saisie))+
geom_jitter(aes(y=reportdata[,param], color='Reports'), size=.1, alpha=.6)+
geom_smooth(aes(y=reportdata[,param], color='Reports Model'), size=.5)+
geom_line(data = witnessdata,
aes(date_releve, witnessdata[,param], color='Random Witness'),
size=.5,
alpha=.7)+
geom_smooth(data=witnessdata, aes(date_releve, witnessdata[,param], color='Random Witness Model'), size=.5)+
ggtitle(paste('Seasonal distribution of ',paramname,' associated with reports vs witnesses measurements
in ',region,' from 2017-03-31 to 2020-04-01'))+
geom_line(y=0, colour='grey50', linetype='dotdash')+
xlab(label = 'Date')+
ylab(label=paramname)+
labs(color='Legende: ')+
theme(axis.text.x = element_text(angle = 35, color='grey20', size = 9, vjust = 1, hjust = 1) )+
# theme(axis.text.y = element_text(color='grey20', size = 6) )+
theme(legend.position = 'top')+
scale_y_continuous( breaks = seq(floor(min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)), by=5),
limits = c(floor( min(humdata[,param], na.rm = T)), ceiling(max(humdata[,param], na.rm = T)) ) )+
scale_x_date( expand = c(0,0),
limits=as.Date( c('2017-03-31','2020-04-01')),
date_labels = '%b %Y',
date_breaks = '2 month')+
scale_color_manual(values=legende)+plotstyle
}
graphlist[['france']] <- weatherPlot(datalist$france$report, datalist$france$witness, datalist$france$name, param)
graphlist[['idf']]    <- weatherPlot(datalist$idf$report, datalist$idf$witness, datalist$idf$name, param)
graphlist[['al']]     <- weatherPlot(datalist$al$report, datalist$al$witness, datalist$al$name, param)
graphlist[['ra']]     <- weatherPlot(datalist$ra$report, datalist$ra$witness, datalist$ra$name, param)
plotgrid <- plot_grid(plotlist=graphlist, labels = 'AUTO', ncol=2, nrow=2, align = 'hv')
plotgrid
}
weatherPlotGrid('humidity')
weatherPlotGrid('temperaturehigh')
weatherPlotGrid('temperaturehigh')
weatherPlotGrid('temperaturelow')
weatherPlotGrid('dewpoint')
weatherPlotGrid('pressure')
weatherPlotGrid('windspeed')
weatherPlotGrid('visibility')
weatherPlotGrid('cloudcover')
weatherPlotGrid('precipintensity')
weatherPlotGrid('windgust')
weatherPlotGrid('uvindex')
typeof(t)
# fonction du comparatif du test shapiro dsk vs mf fabrication en lot
# Cette fonction retourne un objet de type dataframe contenant les analyses croisees
shapiro_batch <- function (dsk_paramnames, mf_paramnames){
# Liste vide pour accueillir les nom de parametres
paramlist <- list()
shapiroList <- list()
# fonction du comparatif du test shapiro dsk vs mf
shapiro <- function(paramDSK, paramMF){
shapiroDSK <- shapiro.test(paramDSK)
shapiroMF <- shapiro.test(paramMF)
shapiroList <- list()
shapiroList[['shapiroDSK']] <- c('shapiro_test'=shapiroDSK$statistic[[1]], 'p.value'=shapiroDSK$p.value[[1]] )
shapiroList[['shapiroMF']] <- c('shapiro_test'=shapiroMF$statistic[[1]], 'p.value'=shapiroMF$p.value[[1]] )
return(shapiroList)
}
# boucle de remplissage de la liste de correspondance
for (i in 1:11){
cat(dsk_paramnames[i], '|------>', mf_paramnames[i],'\n')
paramlist[[ dsk_paramnames[i] ]] <- c(dsk_paramnames[i], mf_paramnames[i])
}
# boucle de calcul
for (param in paramlist ){
paramdsk <- param[1]
parammf <- param[2]
result <- shapiro(DSKdata_42avg[,paramdsk], MFdata[,parammf])
print(result)
shapiroList[[paramdsk]] <- c(result$shapiroDSK['shapiro_test'], result$shapiroDSK['p.value'])
shapiroList[[parammf]] <- c(result$shapiroMF['shapiro_test'], result$shapiroMF['p.value'])
}
shapiro_table <- as.data.frame(shapiroList)
shapiro_table <- t(shapiro_table)
return(shapiro_table)
}
# Ces lignes calculent puis affichent le tableau des tests de Shapiro de normalite
shapiro_df <- shapiro_batch(dsk_paramnames, mf_paramnames)
datatable(shapiro_df)
# fonction du comparatif du test shapiro dsk vs mf fabrication en lot
# Cette fonction retourne un objet de type dataframe contenant les analyses croisees
shapiro_batch <- function (dsk_paramnames, mf_paramnames){
# Liste vide pour accueillir les nom de parametres
paramlist <- list()
shapiroList <- list()
# fonction du comparatif du test shapiro dsk vs mf
shapiro <- function(paramDSK, paramMF){
shapiroDSK <- shapiro.test(paramDSK)
shapiroMF <- shapiro.test(paramMF)
shapiroList <- list()
shapiroList[['shapiroDSK']] <- c('shapiro_test'=shapiroDSK$statistic[[1]], 'p.value'=shapiroDSK$p.value[[1]] )
shapiroList[['shapiroMF']] <- c('shapiro_test'=shapiroMF$statistic[[1]], 'p.value'=shapiroMF$p.value[[1]] )
return(shapiroList)
}
# boucle de remplissage de la liste de correspondance
for (i in 1:11){
cat(dsk_paramnames[i], '|------>', mf_paramnames[i],'\n')
paramlist[[ dsk_paramnames[i] ]] <- c(dsk_paramnames[i], mf_paramnames[i])
}
# boucle de calcul
for (param in paramlist ){
paramdsk <- param[1]
parammf <- param[2]
result <- shapiro(DSKdata_42avg[,paramdsk], MFdata[,parammf])
print(result)
shapiroList[[paramdsk]] <- c(result$shapiroDSK['shapiro_test'], result$shapiroDSK['p.value'])
shapiroList[[parammf]] <- c(result$shapiroMF['shapiro_test'], result$shapiroMF['p.value'])
}
shapiro_table <- as.data.frame(shapiroList)
shapiro_table <- t(shapiro_table)
return(shapiro_table)
}
# Ces lignes calculent puis affichent le tableau des tests de Shapiro de normalite
shapiro_df <- shapiro_batch(dsk_paramnames, mf_paramnames)
datatable(shapiro_df)
gc()
