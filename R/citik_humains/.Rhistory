paramdsk <- param[1]
parammf <- param[2]
# print(paramdsk, parmmf)
p <- make_hist(paramdsk, parammf)
p <- p+xlab(label= paramdsk)
# print(p)
graphlist[[paramdsk]] <<- p
rm(p)
rm(param)
})
}
make_hist_batch()
return(graphlist)
}
### Fabrication rapide et automatique des graphiques
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
h <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
h$temperature
### Fabrication rapide et automatique des graphiques
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
g$temperature
weather_graphplot <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot
batch_histogram <- function (DSKdata, MFdata, dsk_paramnames, mf_paramnames){
if ( length(dsk_paramnames) != length(mf_paramnames) ){
stop('Les vecteurs de parametres ne sont pas egaux.')
}
# Listes vide pour accueillir les noms de parametres et objets
paramlist <- list()
graphlist <- list()
# fonction de fabricatin des graphs individuels
make_hist <- function(paramdsk, parammf){
p <- ggplot(DSKdata_42avg, aes(DSKdata[,paramdsk]))+
geom_histogram( color='green', fill='black', aes(y=..density..), alpha=.55)+
geom_density(data = MFdata, color='blue', aes(MFdata[,parammf]), fill='light blue', alpha=.2)
return(p)
}
# boucle de remplissage de la liste de correspondance
for ( i in 1:length(dsk_paramnames) ){
cat(dsk_paramnames[i], '|------>', mf_paramnames[i],'\n')
paramlist[[ dsk_paramnames[i] ]] <- c(dsk_paramnames[i], mf_paramnames[i])
}
# boucle de fabrication des graphiques scope general
# boucle de fabrication des graphiques scope local
make_hist_batch <- function(){
for (param in paramlist )local({
param <- param
paramdsk <- param[1]
parammf <- param[2]
# print(paramdsk, parmmf)
p <- make_hist(paramdsk, parammf)
p <- p+xlab(label= paramdsk)
# print(p)
graphlist[[paramdsk]] <<- p
rm(p)
rm(param)
})
}
make_hist_batch()
return(graphlist)
}
# Commande avec possibilite d’arrangement des positions
weather_graphplot <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
# Commande avec possibilite d’arrangement des positions
weather_graphplot <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot
### Fabrication rapide et automatique des graphiques human data vs DSK moyennes semi 700 pts
# ces lignes fabriquent automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(humdata, DSKdata_700avg, dsk_paramnames, dsk_paramnames)
# Commande avec possibilite d’arrangement des positions
weather_graphplot <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
g$temperature
### Fabrication rapide et automatique des graphiques human data vs DSK moyennes semi 700 pts
# ces lignes fabriquent automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(humdata, DSKdata_700avg, dsk_paramnames, dsk_paramnames)
g$humidity
batch_histogram <- function (hist_dataset, dens_dataset, hist_paramnames, dens_paramnames){
if ( length(dsk_paramnames) != length(dens_paramnames) ){
stop('Les vecteurs de parametres ne sont pas egaux.')
}
# Listes vide pour accueillir les noms de parametres et objets
paramlist <- list()
graphlist <- list()
# fonction de fabricatin des graphs individuels
make_hist <- function(paramdsk, parammf){
p <- ggplot(hist_dataset, aes(xdataset[,paramdsk]))+
geom_histogram( color='green', fill='black', aes(y=..density..), alpha=.55)+
geom_density(data = dens_dataset, color='blue', aes(dens_dataset[,parammf]), fill='light blue', alpha=.2)
return(p)
}
# boucle de remplissage de la liste de correspondance
for ( i in 1:length(hist_paramnames) ){
cat(hist_paramnames[i], '|------>', dens_paramnames[i],'\n')
paramlist[[ hist_paramnames[i] ]] <- c(hist_paramnames[i], dens_paramnames[i])
}
# boucle de fabrication des graphiques scope general
# boucle de fabrication des graphiques scope local
make_hist_batch <- function(){
for (param in paramlist )local({
param <- param
paramdsk <- param[1]
parammf <- param[2]
# print(paramdsk, parmmf)
p <- make_hist(paramdsk, parammf)
p <- p+xlab(label= paramdsk)
# print(p)
graphlist[[paramdsk]] <<- p
rm(p)
rm(param)
})
}
make_hist_batch()
return(graphlist)
}
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
# Commande avec possibilite d’arrangement des positions
weather_graphplot <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
batch_histogram <- function (hist_dataset, dens_dataset, hist_paramnames, dens_paramnames){
if ( length(dsk_paramnames) != length(dens_paramnames) ){
stop('Les vecteurs de parametres ne sont pas egaux.')
}
# Listes vide pour accueillir les noms de parametres et objets
paramlist <- list()
graphlist <- list()
# fonction de fabricatin des graphs individuels
make_hist <- function(paramdsk, parammf){
p <- ggplot(hist_dataset, aes(hist_dataset[,paramdsk]))+
geom_histogram( color='green', fill='black', aes(y=..density..), alpha=.55)+
geom_density(data = dens_dataset, color='blue', aes(dens_dataset[,parammf]), fill='light blue', alpha=.2)
return(p)
}
# boucle de remplissage de la liste de correspondance
for ( i in 1:length(hist_paramnames) ){
cat(hist_paramnames[i], '|------>', dens_paramnames[i],'\n')
paramlist[[ hist_paramnames[i] ]] <- c(hist_paramnames[i], dens_paramnames[i])
}
# boucle de fabrication des graphiques scope general
# boucle de fabrication des graphiques scope local
make_hist_batch <- function(){
for (param in paramlist )local({
param <- param
paramdsk <- param[1]
parammf <- param[2]
# print(paramdsk, parmmf)
p <- make_hist(paramdsk, parammf)
p <- p+xlab(label= paramdsk)
# print(p)
graphlist[[paramdsk]] <<- p
rm(p)
rm(param)
})
}
make_hist_batch()
return(graphlist)
}
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
# Commande avec possibilite d’arrangement des positions
weather_graphplot <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
# commande courte mais sans possibilite d’arrangement des positions
weather_graphplot <- plot_grid(plotlist=g, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot
### Fabrication rapide et automatique des graphiques human data vs DSK moyennes semi 700 pts
# ces lignes fabriquent automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
h <- batch_histogram(humdata, DSKdata_700avg, dsk_paramnames, dsk_paramnames)
h$humidity
# Commande avec possibilite d’arrangement des positions
weather_graphplot <- plot_grid(h$temperature, h$temperaturelow, h$temperaturehigh,
h$humidity, h$dewpoint, h$pressure, h$windspeed,
h$visibility, h$cloudcover, h$windgust, h$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot
## Vecteurs de caracteres contenant les parametres meteo a comparer un a un
dsk_paramnames <- c("temperature", "temperaturelow", "temperaturehigh",
"humidity", "dewpoint", "pressure", "windspeed",
"visibility", "cloudcover", "windgust", 'precipintensity', 'uvindex')
mf_paramnames <- c('temperature', 'temperature_nocturne', 'temperature_diurne',
'humidite_floor', 'point_rose', 'press_mer', 'vvent',
'visibilite', 'nebulosite_floor','rafale_10min', 'precip_24h', 'uvindex')
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
# Commande avec possibilite d’arrangement des positions
weather_graphplot_g <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
# commande courte mais sans possibilite d’arrangement des positions
# weather_graphplot <- plot_grid(plotlist=g, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot_g
### Fabrication rapide et automatique des graphiques human data vs DSK moyennes semi 700 pts
# ces lignes fabriquent automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
h <- batch_histogram(humdata, DSKdata_700avg, dsk_paramnames, dsk_paramnames)
# Commande avec possibilite d’arrangement des positions
weather_graphplot_h <- plot_grid(h$temperature, h$temperaturelow, h$temperaturehigh,
h$humidity, h$dewpoint, h$pressure, h$windspeed,
h$visibility, h$cloudcover, h$windgust, h$precipintensity,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
# commande courte mais sans possibilite d’arrangement des positions
# weather_graphplot <- plot_grid(plotlist=g, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot_h
# commande courte mais sans possibilite d’arrangement des positions
# weather_graphplot <- plot_grid(plotlist=g, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot_h
# Commande avec possibilite d’arrangement des positions
weather_graphplot_h <- plot_grid(h$temperature, h$temperaturelow, h$temperaturehigh,
h$humidity, h$dewpoint, h$pressure, h$windspeed,
h$visibility, h$cloudcover, h$windgust, h$precipintensity, h$uvindex,
labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
# commande courte mais sans possibilite d’arrangement des positions
# weather_graphplot <- plot_grid(plotlist=g, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot_h
# Commande avec possibilite d’arrangement des positions
weather_graphplot_g <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
g$uvindex,  labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
# commande courte mais sans possibilite d’arrangement des positions
# weather_graphplot <- plot_grid(plotlist=g, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot_g
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
# Commande avec possibilite d’arrangement des positions
weather_graphplot_g <- plot_grid(g$temperature, g$temperaturelow, g$temperaturehigh,
g$humidity, g$dewpoint, g$pressure, g$windspeed,
g$visibility, g$cloudcover, g$windgust, g$precipintensity,
g$uvindex,  labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
# commande courte mais sans possibilite d’arrangement des positions
# weather_graphplot <- plot_grid(plotlist=g, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot_g
batch_histogram <- function (hist_dataset, dens_dataset, hist_paramnames, dens_paramnames){
if ( length(dsk_paramnames) != length(dens_paramnames) ){
print('Les vecteurs de parametres ne sont pas egaux.')
}
# Listes vide pour accueillir les noms de parametres et objets
paramlist <- list()
graphlist <- list()
# fonction de fabricatin des graphs individuels
make_hist <- function(paramdsk, parammf){
p <- ggplot(hist_dataset, aes(hist_dataset[,paramdsk]))+
geom_histogram( color='green', fill='black', aes(y=..density..), alpha=.55)+
geom_density(data = dens_dataset, color='blue', aes(dens_dataset[,parammf]), fill='light blue', alpha=.2)
return(p)
}
# boucle de remplissage de la liste de correspondance
for ( i in 1:length(hist_paramnames) ){
cat(hist_paramnames[i], '|------>', dens_paramnames[i],'\n')
paramlist[[ hist_paramnames[i] ]] <- c(hist_paramnames[i], dens_paramnames[i])
}
# boucle de fabrication des graphiques scope general
# boucle de fabrication des graphiques scope local
make_hist_batch <- function(){
for (param in paramlist )local({
param <- param
paramdsk <- param[1]
parammf <- param[2]
# print(paramdsk, parmmf)
p <- make_hist(paramdsk, parammf)
p <- p+xlab(label= paramdsk)
# print(p)
graphlist[[paramdsk]] <<- p
rm(p)
rm(param)
})
}
make_hist_batch()
return(graphlist)
}
## Vecteurs de caracteres contenant les parametres meteo a comparer un a un
dsk_paramnames <- c("temperature", "temperaturelow", "temperaturehigh",
"humidity", "dewpoint", "pressure", "windspeed",
"visibility", "cloudcover", "windgust", 'precipintensity', 'uvindex')
mf_paramnames <- c('temperature', 'temperature_nocturne', 'temperature_diurne',
'humidite_floor', 'point_rose', 'press_mer', 'vvent',
'visibilite', 'nebulosite_floor','rafale_10min', 'precip_24h')
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
batch_histogram <- function (hist_dataset, dens_dataset, hist_paramnames, dens_paramnames){
if ( length(dsk_paramnames) != length(dens_paramnames) ){
stop('Les vecteurs de parametres ne sont pas egaux.')
}
# Listes vide pour accueillir les noms de parametres et objets
paramlist <- list()
graphlist <- list()
# fonction de fabricatin des graphs individuels
make_hist <- function(paramdsk, parammf){
p <- ggplot(hist_dataset, aes(hist_dataset[,paramdsk]))+
geom_histogram( color='green', fill='black', aes(y=..density..), alpha=.55)+
geom_density(data = dens_dataset, color='blue', aes(dens_dataset[,parammf]), fill='light blue', alpha=.2)
return(p)
}
# boucle de remplissage de la liste de correspondance
for ( i in 1:length(hist_paramnames) ){
cat(hist_paramnames[i], '|------>', dens_paramnames[i],'\n')
paramlist[[ hist_paramnames[i] ]] <- c(hist_paramnames[i], dens_paramnames[i])
}
# boucle de fabrication des graphiques scope general
# boucle de fabrication des graphiques scope local
make_hist_batch <- function(){
for (param in paramlist )local({
param <- param
paramdsk <- param[1]
parammf <- param[2]
# print(paramdsk, parmmf)
p <- make_hist(paramdsk, parammf)
p <- p+xlab(label= paramdsk)
# print(p)
graphlist[[paramdsk]] <<- p
rm(p)
rm(param)
})
}
make_hist_batch()
return(graphlist)
}
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
batch_histogram <- function (hist_dataset, dens_dataset, hist_paramnames, dens_paramnames){
if ( length(dsk_paramnames) != length(dens_paramnames) ){
stop('Les vecteurs de parametres ne sont pas de tailles egales.')
}
# Listes vide pour accueillir les noms de parametres et objets
paramlist <- list()
graphlist <- list()
# fonction de fabricatin des graphs individuels
make_hist <- function(paramdsk, parammf){
p <- ggplot(hist_dataset, aes(hist_dataset[,paramdsk]))+
geom_histogram( color='green', fill='black', aes(y=..density..), alpha=.55)+
geom_density(data = dens_dataset, color='blue', aes(dens_dataset[,parammf]), fill='light blue', alpha=.2)
return(p)
}
# boucle de remplissage de la liste de correspondance
for ( i in 1:length(hist_paramnames) ){
cat(hist_paramnames[i], '|------>', dens_paramnames[i],'\n')
paramlist[[ hist_paramnames[i] ]] <- c(hist_paramnames[i], dens_paramnames[i])
}
# boucle de fabrication des graphiques scope general
# boucle de fabrication des graphiques scope local
make_hist_batch <- function(){
for (param in paramlist )local({
param <- param
paramdsk <- param[1]
parammf <- param[2]
# print(paramdsk, parmmf)
p <- make_hist(paramdsk, parammf)
p <- p+xlab(label= paramdsk)
# print(p)
graphlist[[paramdsk]] <<- p
rm(p)
rm(param)
})
}
make_hist_batch()
return(graphlist)
}
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
### Fabrication rapide et automatique des graphiques human data vs DSK moyennes semi 700 pts
# ces lignes fabriquent automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
h <- batch_histogram(humdata, DSKdata_700avg, dsk_paramnames, dsk_paramnames)
### Fabrication rapide et automatique des graphiques DSK moyennes vs MF moyennes
# ces lignes fabrique automatiquement tous les graphs de l’article
# la fonction batch_histogram renvoi une liste contenant les graphs fabriques
g <- batch_histogram(DSKdata_42avg, MFdata, dsk_paramnames, mf_paramnames)
# commande courte mais sans possibilite d’arrangement des positions
# weather_graphplot <- plot_grid(plotlist=g, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_graphplot_h
View(DSKdata_700avg)
c("75","77","78",91:95)
View(DSKdata_42avg)
View(DSKdata_700avg)
View(DSKdata_al)
### 2.3 Methode d’importation depuis la BDD geographique PostgreSQL/PostGIS
## /!\ Ne pas commenter ni supprimer /!\
require(RPostgreSQL)
require(tidyverse)
library(cowplot)
require(DT)
# Donnee regionale moyennee idf
curs_dsk_700avg_idf <- dbSendQuery(con, 'SELECT * FROM meteo.darksky_maille_700_idf_avg order by date_releve asc')
## Parametres de connectin a la base PostgreSQL
drv <- PostgreSQL()
con <- dbConnect(drv, db='localbase10', user='beetroot')
# Donnee regionale moyennee idf
curs_dsk_700avg_idf <- dbSendQuery(con, 'SELECT * FROM meteo.darksky_maille_700_idf_avg order by date_releve asc')
DSKdata_700avg_idf <- fetch(curs_dsk_700avg_idf, n=-1)
# Donnee regionale moyennee al
curs_dsk_700avg_al <- dbSendQuery(con, 'SELECT * FROM meteo.darksky_maille_700_al_avg order by date_releve asc')
DSKdata_700avg_al <- fetch(curs_dsk_700avg_al, n=-1)
# Donnee regionale moyennee ra
curs_dsk_700avg_ra <- dbSendQuery(con, 'SELECT * FROM meteo.darksky_maille_700_ra_avg order by date_releve asc')
DSKdata_700avg_ra <- fetch(curs_dsk_700avg_ra, n=-1)
al <- batch_histogram(humdata_al, DSKdata_700avg_al, dsk_paramnames, dsk_paramnames)
weather_gridplot_al <- plot_grid(plotlist=al, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
mf_paramnames <- c('temperature', 'temperature_nocturne', 'temperature_diurne',
'humidite_floor', 'point_rose', 'press_mer', 'vvent',
'visibilite', 'nebulosite_floor','rafale_10min', 'precip_24h', 'uvindex')
## Vecteurs de caracteres contenant les parametres meteo a comparer un a un
dsk_paramnames <- c("temperature", "temperaturelow", "temperaturehigh",
"humidity", "dewpoint", "pressure", "windspeed",
"visibility", "cloudcover", "windgust", 'precipintensity', 'uvindex')
al <- batch_histogram(humdata_al, DSKdata_700avg_al, dsk_paramnames, dsk_paramnames)
weather_gridplot_al <- plot_grid(plotlist=al, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
al$temperature
al$temperaturelow
al$temperaturehigh
al$humidity
al$dewpoint
al$pressure
al$windspeed
al$visibility
al$cloudcover
al$windgust
al$uvindex
al$temperature
View(curs_dsk_700avg_al)
View(humdata_al)
View(humdata)
View(DSKdata_700avg_al)
# Donnee regionale moyennee idf
curs_dsk_700avg_idf <- dbSendQuery(con, 'SELECT * FROM meteo.darksky_maille_700_idf_avg order by date_releve asc')
DSKdata_700avg_idf <- fetch(curs_dsk_700avg_idf, n=-1)
# Donnee regionale moyennee al
curs_dsk_700avg_al <- dbSendQuery(con, 'SELECT * FROM meteo.darksky_maille_700_al_avg order by date_releve asc')
DSKdata_700avg_al <- fetch(curs_dsk_700avg_al, n=-1)
# Donnee regionale moyennee ra
curs_dsk_700avg_ra <- dbSendQuery(con, 'SELECT * FROM meteo.darksky_maille_700_ra_avg order by date_releve asc')
DSKdata_700avg_ra <- fetch(curs_dsk_700avg_ra, n=-1)
al <- batch_histogram(humdata_al, DSKdata_700avg_al, dsk_paramnames, dsk_paramnames)
al$temperature
weather_gridplot_al <- plot_grid(plotlist=al, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_gridplot_al
al$temperature
weather_gridplot_al <- plot_grid(plotlist=al, labels = "AUTO", ncol=3, nrow = 4 , align = 'hv')
weather_gridplot_al
### Gridplots regeionaux
# idf
idf <- batch_histogram(humdata_idf, DSKdata_700avg_idf, dsk_paramnames, dsk_paramnames)
idf$temperature
weather_gridplot_idf <- plot_grid(plotlist=idf, labels = "AUTO", ncol=3, nrow = 4 , idfign = 'hv')
weather_gridplot_idf
### Gridplots regeionaux
# idf
idf <- batch_histogram(humdata_idf, DSKdata_700avg_idf, dsk_paramnames, dsk_paramnames)
idf$temperature
weather_gridplot_idf <- plot_grid(plotlist=idf, labels = "AUTO", ncol=3, nrow = 4 , idfign = 'hv')
weather_gridplot_idf
## Vecteurs de caracteres contenant les parametres meteo a comparer un a un
dsk_paramnames <- c("temperature", "temperaturelow", "temperaturehigh",
"humidity", "dewpoint", "pressure", "windspeed",
"visibility", "cloudcover", "windgust", 'precipintensity', 'uvindex')
weather_gridplot_al
#ra
ra <- batch_histogram(humdata_ra, DSKdata_700avg_ra, dsk_paramnames, dsk_paramnames)
weather_gridplot_ra <- plot_grid(plotlist=ra, labels = "AUTO", ncol=3, nrow = 4 , raign = 'hv')
weather_gridplot_ra
View(humdata_ra)
names(humdata_al)
names(humdata_ra)
names(humdata_idf)
names(DSKdata_700avg_idf)
names(DSKdata_700avg_al)
names(DSKdata_700avg_ra)
idf$uvindex
al$uvindex
ra$uvindex
weather_gridplot_ra <- plot_grid(plotlist=ra, labels = "AUTO", ncol=4, nrow = 3 , raign = 'hv')
weather_gridplot_ra
